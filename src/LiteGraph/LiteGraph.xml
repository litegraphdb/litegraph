<?xml version="1.0"?>
<doc>
    <assembly>
        <name>LiteGraph</name>
    </assembly>
    <members>
        <member name="T:LiteGraph.BackupFile">
            <summary>
            Backup file.
            </summary>
        </member>
        <member name="P:LiteGraph.BackupFile.Filename">
            <summary>
            Filename.
            </summary>
        </member>
        <member name="P:LiteGraph.BackupFile.Length">
            <summary>
            File length.
            </summary>
        </member>
        <member name="P:LiteGraph.BackupFile.MD5Hash">
            <summary>
            MD5 hash.
            </summary>
        </member>
        <member name="P:LiteGraph.BackupFile.SHA1Hash">
            <summary>
            SHA1 hash.
            </summary>
        </member>
        <member name="P:LiteGraph.BackupFile.SHA256Hash">
            <summary>
            SHA256 hash.
            </summary>
        </member>
        <member name="P:LiteGraph.BackupFile.CreatedUtc">
            <summary>
            Creation timestamp, in UTC.
            </summary>
        </member>
        <member name="P:LiteGraph.BackupFile.LastUpdateUtc">
            <summary>
            Timestamp from last update, in UTC.
            </summary>
        </member>
        <member name="P:LiteGraph.BackupFile.LastAccessUtc">
            <summary>
            Timestamp from last access, in UTC.
            </summary>
        </member>
        <member name="P:LiteGraph.BackupFile.Data">
            <summary>
            File contents.
            </summary>
        </member>
        <member name="M:LiteGraph.BackupFile.#ctor">
            <summary>
            Instantiate.
            </summary>
        </member>
        <member name="T:LiteGraph.CachingSettings">
            <summary>
            Caching settings.
            </summary>
        </member>
        <member name="P:LiteGraph.CachingSettings.Enable">
            <summary>
            Enable or disable caching.
            </summary>
        </member>
        <member name="P:LiteGraph.CachingSettings.Capacity">
            <summary>
            Maximum number of records to cache, per resource type.
            </summary>
        </member>
        <member name="P:LiteGraph.CachingSettings.EvictCount">
            <summary>
            Number of records to evict when capacity pressure is encountered.
            It is recommended that this value be approximately 10% to 25% of the capacity.
            </summary>
        </member>
        <member name="M:LiteGraph.CachingSettings.#ctor">
            <summary>
            Caching settings.
            </summary>
        </member>
        <member name="T:LiteGraph.Client.Implementations.AdminMethods">
            <summary>
            Admin methods.
            Client implementations are responsible for input validation and cross-cutting logic.
            </summary>
        </member>
        <member name="M:LiteGraph.Client.Implementations.AdminMethods.#ctor(LiteGraph.LiteGraphClient,LiteGraph.GraphRepositories.GraphRepositoryBase,System.String)">
            <summary>
            Admin methods.
            </summary>
            <param name="client">LiteGraph client.</param>
            <param name="repo">Graph repository.</param>
            <param name="backupDirectory">Backup directory.</param>
        </member>
        <member name="M:LiteGraph.Client.Implementations.AdminMethods.Backup(System.String)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Client.Implementations.AdminMethods.DeleteBackup(System.String)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Client.Implementations.AdminMethods.BackupReadAll">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Client.Implementations.AdminMethods.BackupRead(System.String)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Client.Implementations.AdminMethods.BackupEnumerate(LiteGraph.EnumerationQuery)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Client.Implementations.AdminMethods.BackupExists(System.String)">
            <inheritdoc />
        </member>
        <member name="T:LiteGraph.Client.Implementations.BatchMethods">
            <summary>
            Batch methods.
            Client implementations are responsible for input validation and cross-cutting logic.
            </summary>
        </member>
        <member name="M:LiteGraph.Client.Implementations.BatchMethods.#ctor(LiteGraph.LiteGraphClient,LiteGraph.GraphRepositories.GraphRepositoryBase)">
            <summary>
            Batch methods.
            </summary>
            <param name="client">LiteGraph client.</param>
            <param name="repo">Graph repository.</param>
        </member>
        <member name="M:LiteGraph.Client.Implementations.BatchMethods.Existence(System.Guid,System.Guid,LiteGraph.ExistenceRequest)">
            <inheritdoc />
        </member>
        <member name="T:LiteGraph.Client.Implementations.CredentialMethods">
            <summary>
            Credential methods.
            Client implementations are responsible for input validation and cross-cutting logic.
            </summary>
        </member>
        <member name="M:LiteGraph.Client.Implementations.CredentialMethods.#ctor(LiteGraph.LiteGraphClient,LiteGraph.GraphRepositories.GraphRepositoryBase)">
            <summary>
            Credential methods.
            </summary>
            <param name="client">LiteGraph client.</param>
            <param name="repo">Graph repository.</param>
        </member>
        <member name="M:LiteGraph.Client.Implementations.CredentialMethods.Create(LiteGraph.Credential)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Client.Implementations.CredentialMethods.ReadAllInTenant(System.Guid,LiteGraph.EnumerationOrderEnum,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Client.Implementations.CredentialMethods.ReadMany(System.Nullable{System.Guid},System.Nullable{System.Guid},System.String,LiteGraph.EnumerationOrderEnum,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Client.Implementations.CredentialMethods.ReadByGuid(System.Guid,System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Client.Implementations.CredentialMethods.ReadByBearerToken(System.String)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Client.Implementations.CredentialMethods.Enumerate(LiteGraph.EnumerationQuery)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Client.Implementations.CredentialMethods.Update(LiteGraph.Credential)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Client.Implementations.CredentialMethods.DeleteAllInTenant(System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Client.Implementations.CredentialMethods.DeleteByGuid(System.Guid,System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Client.Implementations.CredentialMethods.DeleteByUser(System.Guid,System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Client.Implementations.CredentialMethods.ExistsByGuid(System.Guid,System.Guid)">
            <inheritdoc />
        </member>
        <member name="T:LiteGraph.Client.Implementations.EdgeMethods">
            <summary>
            Edge methods.
            Client implementations are responsible for input validation and cross-cutting logic.
            </summary>
        </member>
        <member name="M:LiteGraph.Client.Implementations.EdgeMethods.#ctor(LiteGraph.LiteGraphClient,LiteGraph.GraphRepositories.GraphRepositoryBase,Caching.LRUCache{System.Guid,LiteGraph.Edge})">
            <summary>
            Edge methods.
            </summary>
            <param name="client">LiteGraph client.</param>
            <param name="repo">Graph repository.</param>
            <param name="cache">Cache.</param>
        </member>
        <member name="M:LiteGraph.Client.Implementations.EdgeMethods.Create(LiteGraph.Edge)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Client.Implementations.EdgeMethods.CreateMany(System.Guid,System.Guid,System.Collections.Generic.List{LiteGraph.Edge})">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Client.Implementations.EdgeMethods.ReadAllInTenant(System.Guid,LiteGraph.EnumerationOrderEnum,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Client.Implementations.EdgeMethods.ReadAllInGraph(System.Guid,System.Guid,LiteGraph.EnumerationOrderEnum,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Client.Implementations.EdgeMethods.ReadMany(System.Guid,System.Guid,System.Collections.Generic.List{System.String},System.Collections.Specialized.NameValueCollection,ExpressionTree.Expr,LiteGraph.EnumerationOrderEnum,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Client.Implementations.EdgeMethods.ReadFirst(System.Guid,System.Guid,System.Collections.Generic.List{System.String},System.Collections.Specialized.NameValueCollection,ExpressionTree.Expr,LiteGraph.EnumerationOrderEnum)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Client.Implementations.EdgeMethods.ReadByGuid(System.Guid,System.Guid,System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Client.Implementations.EdgeMethods.Enumerate(LiteGraph.EnumerationQuery)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Client.Implementations.EdgeMethods.ReadNodeEdges(System.Guid,System.Guid,System.Guid,System.Collections.Generic.List{System.String},System.Collections.Specialized.NameValueCollection,ExpressionTree.Expr,LiteGraph.EnumerationOrderEnum,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Client.Implementations.EdgeMethods.ReadEdgesFromNode(System.Guid,System.Guid,System.Guid,System.Collections.Generic.List{System.String},System.Collections.Specialized.NameValueCollection,ExpressionTree.Expr,LiteGraph.EnumerationOrderEnum,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Client.Implementations.EdgeMethods.ReadEdgesToNode(System.Guid,System.Guid,System.Guid,System.Collections.Generic.List{System.String},System.Collections.Specialized.NameValueCollection,ExpressionTree.Expr,LiteGraph.EnumerationOrderEnum,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Client.Implementations.EdgeMethods.ReadEdgesBetweenNodes(System.Guid,System.Guid,System.Guid,System.Guid,System.Collections.Generic.List{System.String},System.Collections.Specialized.NameValueCollection,ExpressionTree.Expr,LiteGraph.EnumerationOrderEnum,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Client.Implementations.EdgeMethods.Update(LiteGraph.Edge)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Client.Implementations.EdgeMethods.DeleteByGuid(System.Guid,System.Guid,System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Client.Implementations.EdgeMethods.DeleteAllInTenant(System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Client.Implementations.EdgeMethods.DeleteAllInGraph(System.Guid,System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Client.Implementations.EdgeMethods.DeleteMany(System.Guid,System.Guid,System.Collections.Generic.List{System.Guid})">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Client.Implementations.EdgeMethods.DeleteNodeEdges(System.Guid,System.Guid,System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Client.Implementations.EdgeMethods.DeleteNodeEdges(System.Guid,System.Guid,System.Collections.Generic.List{System.Guid})">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Client.Implementations.EdgeMethods.ExistsByGuid(System.Guid,System.Guid,System.Guid)">
            <inheritdoc />
        </member>
        <member name="T:LiteGraph.Client.Implementations.GraphMethods">
            <summary>
            Graph methods.
            Client implementations are responsible for input validation and cross-cutting logic.
            </summary>
        </member>
        <member name="M:LiteGraph.Client.Implementations.GraphMethods.#ctor(LiteGraph.LiteGraphClient,LiteGraph.GraphRepositories.GraphRepositoryBase,Caching.LRUCache{System.Guid,LiteGraph.Graph})">
            <summary>
            Graph methods.
            </summary>
            <param name="client">LiteGraph client.</param>
            <param name="repo">Graph repository.</param>
            <param name="cache">Cache.</param>
        </member>
        <member name="M:LiteGraph.Client.Implementations.GraphMethods.Create(LiteGraph.Graph)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Client.Implementations.GraphMethods.ReadAllInTenant(System.Guid,LiteGraph.EnumerationOrderEnum,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Client.Implementations.GraphMethods.ReadMany(System.Guid,System.Collections.Generic.List{System.String},System.Collections.Specialized.NameValueCollection,ExpressionTree.Expr,LiteGraph.EnumerationOrderEnum,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Client.Implementations.GraphMethods.ReadFirst(System.Guid,System.Collections.Generic.List{System.String},System.Collections.Specialized.NameValueCollection,ExpressionTree.Expr,LiteGraph.EnumerationOrderEnum)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Client.Implementations.GraphMethods.ReadByGuid(System.Guid,System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Client.Implementations.GraphMethods.Enumerate(LiteGraph.EnumerationQuery)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Client.Implementations.GraphMethods.Update(LiteGraph.Graph)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Client.Implementations.GraphMethods.DeleteByGuid(System.Guid,System.Guid,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Client.Implementations.GraphMethods.DeleteAllInTenant(System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Client.Implementations.GraphMethods.ExistsByGuid(System.Guid,System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Client.Implementations.GraphMethods.GetStatistics(System.Guid,System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Client.Implementations.GraphMethods.GetStatistics(System.Guid)">
            <inheritdoc />
        </member>
        <member name="T:LiteGraph.Client.Implementations.LabelMethods">
            <summary>
            Label methods.
            Client implementations are responsible for input validation and cross-cutting logic.
            </summary>
        </member>
        <member name="M:LiteGraph.Client.Implementations.LabelMethods.#ctor(LiteGraph.LiteGraphClient,LiteGraph.GraphRepositories.GraphRepositoryBase)">
            <summary>
            Label methods.
            </summary>
            <param name="client">LiteGraph client.</param>
            <param name="repo">Graph repository.</param>
        </member>
        <member name="M:LiteGraph.Client.Implementations.LabelMethods.Create(LiteGraph.LabelMetadata)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Client.Implementations.LabelMethods.CreateMany(System.Guid,System.Collections.Generic.List{LiteGraph.LabelMetadata})">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Client.Implementations.LabelMethods.ReadAllInTenant(System.Guid,LiteGraph.EnumerationOrderEnum,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Client.Implementations.LabelMethods.ReadAllInGraph(System.Guid,System.Guid,LiteGraph.EnumerationOrderEnum,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Client.Implementations.LabelMethods.ReadMany(System.Guid,System.Nullable{System.Guid},System.Nullable{System.Guid},System.Nullable{System.Guid},System.String,LiteGraph.EnumerationOrderEnum,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Client.Implementations.LabelMethods.ReadManyGraph(System.Guid,System.Guid,LiteGraph.EnumerationOrderEnum,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Client.Implementations.LabelMethods.ReadManyNode(System.Guid,System.Guid,System.Guid,LiteGraph.EnumerationOrderEnum,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Client.Implementations.LabelMethods.ReadManyEdge(System.Guid,System.Guid,System.Guid,LiteGraph.EnumerationOrderEnum,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Client.Implementations.LabelMethods.ReadByGuid(System.Guid,System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Client.Implementations.LabelMethods.Enumerate(LiteGraph.EnumerationQuery)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Client.Implementations.LabelMethods.Update(LiteGraph.LabelMetadata)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Client.Implementations.LabelMethods.DeleteAllInTenant(System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Client.Implementations.LabelMethods.DeleteAllInGraph(System.Guid,System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Client.Implementations.LabelMethods.DeleteGraphLabels(System.Guid,System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Client.Implementations.LabelMethods.DeleteNodeLabels(System.Guid,System.Guid,System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Client.Implementations.LabelMethods.DeleteEdgeLabels(System.Guid,System.Guid,System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Client.Implementations.LabelMethods.DeleteByGuid(System.Guid,System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Client.Implementations.LabelMethods.DeleteMany(System.Guid,System.Nullable{System.Guid},System.Collections.Generic.List{System.Guid},System.Collections.Generic.List{System.Guid})">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Client.Implementations.LabelMethods.DeleteMany(System.Guid,System.Collections.Generic.List{System.Guid})">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Client.Implementations.LabelMethods.ExistsByGuid(System.Guid,System.Guid)">
            <inheritdoc />
        </member>
        <member name="T:LiteGraph.Client.Implementations.NodeMethods">
            <summary>
            Node methods.
            Client implementations are responsible for input validation and cross-cutting logic.
            </summary>
        </member>
        <member name="M:LiteGraph.Client.Implementations.NodeMethods.#ctor(LiteGraph.LiteGraphClient,LiteGraph.GraphRepositories.GraphRepositoryBase,Caching.LRUCache{System.Guid,LiteGraph.Node})">
            <summary>
            Node methods.
            </summary>
            <param name="client">LiteGraph client.</param>
            <param name="repo">Graph repository.</param>
            <param name="cache">Cache.</param>
        </member>
        <member name="M:LiteGraph.Client.Implementations.NodeMethods.Create(LiteGraph.Node)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Client.Implementations.NodeMethods.CreateMany(System.Guid,System.Guid,System.Collections.Generic.List{LiteGraph.Node})">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Client.Implementations.NodeMethods.ReadAllInTenant(System.Guid,LiteGraph.EnumerationOrderEnum,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Client.Implementations.NodeMethods.ReadAllInGraph(System.Guid,System.Guid,LiteGraph.EnumerationOrderEnum,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Client.Implementations.NodeMethods.ReadMany(System.Guid,System.Guid,System.Collections.Generic.List{System.String},System.Collections.Specialized.NameValueCollection,ExpressionTree.Expr,LiteGraph.EnumerationOrderEnum,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Client.Implementations.NodeMethods.ReadFirst(System.Guid,System.Guid,System.Collections.Generic.List{System.String},System.Collections.Specialized.NameValueCollection,ExpressionTree.Expr,LiteGraph.EnumerationOrderEnum)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Client.Implementations.NodeMethods.ReadMostConnected(System.Guid,System.Guid,System.Collections.Generic.List{System.String},System.Collections.Specialized.NameValueCollection,ExpressionTree.Expr,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Client.Implementations.NodeMethods.ReadLeastConnected(System.Guid,System.Guid,System.Collections.Generic.List{System.String},System.Collections.Specialized.NameValueCollection,ExpressionTree.Expr,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Client.Implementations.NodeMethods.ReadByGuid(System.Guid,System.Guid,System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Client.Implementations.NodeMethods.Enumerate(LiteGraph.EnumerationQuery)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Client.Implementations.NodeMethods.Update(LiteGraph.Node)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Client.Implementations.NodeMethods.DeleteByGuid(System.Guid,System.Guid,System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Client.Implementations.NodeMethods.DeleteAllInTenant(System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Client.Implementations.NodeMethods.DeleteAllInGraph(System.Guid,System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Client.Implementations.NodeMethods.DeleteMany(System.Guid,System.Guid,System.Collections.Generic.List{System.Guid})">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Client.Implementations.NodeMethods.ExistsByGuid(System.Guid,System.Guid,System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Client.Implementations.NodeMethods.ReadParents(System.Guid,System.Guid,System.Guid,LiteGraph.EnumerationOrderEnum,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Client.Implementations.NodeMethods.ReadChildren(System.Guid,System.Guid,System.Guid,LiteGraph.EnumerationOrderEnum,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Client.Implementations.NodeMethods.ReadNeighbors(System.Guid,System.Guid,System.Guid,LiteGraph.EnumerationOrderEnum,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Client.Implementations.NodeMethods.ReadRoutes(LiteGraph.SearchTypeEnum,System.Guid,System.Guid,System.Guid,System.Guid,ExpressionTree.Expr,ExpressionTree.Expr)">
            <inheritdoc />
        </member>
        <member name="T:LiteGraph.Client.Implementations.TagMethods">
            <summary>
            Tag methods.
            Client implementations are responsible for input validation and cross-cutting logic.
            </summary>
        </member>
        <member name="M:LiteGraph.Client.Implementations.TagMethods.#ctor(LiteGraph.LiteGraphClient,LiteGraph.GraphRepositories.GraphRepositoryBase)">
            <summary>
            Tag methods.
            </summary>
            <param name="client">LiteGraph client.</param>
            <param name="repo">Graph repository.</param>
        </member>
        <member name="M:LiteGraph.Client.Implementations.TagMethods.Create(LiteGraph.TagMetadata)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Client.Implementations.TagMethods.CreateMany(System.Guid,System.Collections.Generic.List{LiteGraph.TagMetadata})">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Client.Implementations.TagMethods.ReadAllInTenant(System.Guid,LiteGraph.EnumerationOrderEnum,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Client.Implementations.TagMethods.ReadAllInGraph(System.Guid,System.Guid,LiteGraph.EnumerationOrderEnum,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Client.Implementations.TagMethods.ReadMany(System.Guid,System.Nullable{System.Guid},System.Nullable{System.Guid},System.Nullable{System.Guid},System.String,System.String,LiteGraph.EnumerationOrderEnum,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Client.Implementations.TagMethods.ReadManyGraph(System.Guid,System.Guid,LiteGraph.EnumerationOrderEnum,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Client.Implementations.TagMethods.ReadManyNode(System.Guid,System.Guid,System.Guid,LiteGraph.EnumerationOrderEnum,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Client.Implementations.TagMethods.ReadManyEdge(System.Guid,System.Guid,System.Guid,LiteGraph.EnumerationOrderEnum,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Client.Implementations.TagMethods.ReadByGuid(System.Guid,System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Client.Implementations.TagMethods.Enumerate(LiteGraph.EnumerationQuery)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Client.Implementations.TagMethods.Update(LiteGraph.TagMetadata)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Client.Implementations.TagMethods.DeleteByGuid(System.Guid,System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Client.Implementations.TagMethods.DeleteMany(System.Guid,System.Nullable{System.Guid},System.Collections.Generic.List{System.Guid},System.Collections.Generic.List{System.Guid})">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Client.Implementations.TagMethods.DeleteMany(System.Guid,System.Collections.Generic.List{System.Guid})">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Client.Implementations.TagMethods.DeleteAllInTenant(System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Client.Implementations.TagMethods.DeleteAllInGraph(System.Guid,System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Client.Implementations.TagMethods.DeleteGraphTags(System.Guid,System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Client.Implementations.TagMethods.DeleteNodeTags(System.Guid,System.Guid,System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Client.Implementations.TagMethods.DeleteEdgeTags(System.Guid,System.Guid,System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Client.Implementations.TagMethods.ExistsByGuid(System.Guid,System.Guid)">
            <inheritdoc />
        </member>
        <member name="T:LiteGraph.Client.Implementations.TenantMethods">
            <summary>
            Tenant methods.
            Client implementations are responsible for input validation and cross-cutting logic.
            </summary>
        </member>
        <member name="M:LiteGraph.Client.Implementations.TenantMethods.#ctor(LiteGraph.LiteGraphClient,LiteGraph.GraphRepositories.GraphRepositoryBase,Caching.LRUCache{System.Guid,LiteGraph.TenantMetadata})">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Client.Implementations.TenantMethods.Create(LiteGraph.TenantMetadata)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Client.Implementations.TenantMethods.ReadMany(LiteGraph.EnumerationOrderEnum,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Client.Implementations.TenantMethods.ReadByGuid(System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Client.Implementations.TenantMethods.Enumerate(LiteGraph.EnumerationQuery)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Client.Implementations.TenantMethods.Update(LiteGraph.TenantMetadata)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Client.Implementations.TenantMethods.DeleteByGuid(System.Guid,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Client.Implementations.TenantMethods.ExistsByGuid(System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Client.Implementations.TenantMethods.GetStatistics(System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Client.Implementations.TenantMethods.GetStatistics">
            <inheritdoc />
        </member>
        <member name="T:LiteGraph.Client.Implementations.UserMethods">
            <summary>
            User methods.
            Client implementations are responsible for input validation and cross-cutting logic.
            </summary>
        </member>
        <member name="M:LiteGraph.Client.Implementations.UserMethods.#ctor(LiteGraph.LiteGraphClient,LiteGraph.GraphRepositories.GraphRepositoryBase)">
            <summary>
            User methods.
            </summary>
            <param name="client">LiteGraph client.</param>
            <param name="repo">Graph repository.</param>
        </member>
        <member name="M:LiteGraph.Client.Implementations.UserMethods.Create(LiteGraph.UserMaster)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Client.Implementations.UserMethods.ReadAllInTenant(System.Guid,LiteGraph.EnumerationOrderEnum,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Client.Implementations.UserMethods.ReadMany(System.Nullable{System.Guid},System.String,LiteGraph.EnumerationOrderEnum,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Client.Implementations.UserMethods.ReadByGuid(System.Guid,System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Client.Implementations.UserMethods.ReadByEmail(System.Guid,System.String)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Client.Implementations.UserMethods.ReadTenantsByEmail(System.String)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Client.Implementations.UserMethods.Enumerate(LiteGraph.EnumerationQuery)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Client.Implementations.UserMethods.Update(LiteGraph.UserMaster)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Client.Implementations.UserMethods.DeleteByGuid(System.Guid,System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Client.Implementations.UserMethods.DeleteAllInTenant(System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Client.Implementations.UserMethods.ExistsByGuid(System.Guid,System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Client.Implementations.UserMethods.ExistsByEmail(System.Guid,System.String)">
            <inheritdoc />
        </member>
        <member name="T:LiteGraph.Client.Implementations.VectorMethods">
            <summary>
            Vector methods.
            Client implementations are responsible for input validation and cross-cutting logic.
            </summary>
        </member>
        <member name="M:LiteGraph.Client.Implementations.VectorMethods.#ctor(LiteGraph.LiteGraphClient,LiteGraph.GraphRepositories.GraphRepositoryBase)">
            <summary>
            Vector methods.
            </summary>
            <param name="client">LiteGraph client.</param>
            <param name="repo">Graph repository.</param>
        </member>
        <member name="M:LiteGraph.Client.Implementations.VectorMethods.Create(LiteGraph.VectorMetadata)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Client.Implementations.VectorMethods.CreateMany(System.Guid,System.Collections.Generic.List{LiteGraph.VectorMetadata})">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Client.Implementations.VectorMethods.ReadAllInTenant(System.Guid,LiteGraph.EnumerationOrderEnum,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Client.Implementations.VectorMethods.ReadAllInGraph(System.Guid,System.Guid,LiteGraph.EnumerationOrderEnum,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Client.Implementations.VectorMethods.ReadMany(System.Guid,System.Nullable{System.Guid},System.Nullable{System.Guid},System.Nullable{System.Guid},LiteGraph.EnumerationOrderEnum,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Client.Implementations.VectorMethods.ReadManyGraph(System.Guid,System.Guid,LiteGraph.EnumerationOrderEnum,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Client.Implementations.VectorMethods.ReadManyNode(System.Guid,System.Guid,System.Guid,LiteGraph.EnumerationOrderEnum,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Client.Implementations.VectorMethods.ReadManyEdge(System.Guid,System.Guid,System.Guid,LiteGraph.EnumerationOrderEnum,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Client.Implementations.VectorMethods.ReadByGuid(System.Guid,System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Client.Implementations.VectorMethods.Enumerate(LiteGraph.EnumerationQuery)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Client.Implementations.VectorMethods.Update(LiteGraph.VectorMetadata)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Client.Implementations.VectorMethods.DeleteByGuid(System.Guid,System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Client.Implementations.VectorMethods.DeleteMany(System.Guid,System.Nullable{System.Guid},System.Collections.Generic.List{System.Guid},System.Collections.Generic.List{System.Guid})">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Client.Implementations.VectorMethods.DeleteMany(System.Guid,System.Collections.Generic.List{System.Guid})">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Client.Implementations.VectorMethods.DeleteAllInTenant(System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Client.Implementations.VectorMethods.DeleteAllInGraph(System.Guid,System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Client.Implementations.VectorMethods.DeleteGraphVectors(System.Guid,System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Client.Implementations.VectorMethods.DeleteNodeVectors(System.Guid,System.Guid,System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Client.Implementations.VectorMethods.DeleteEdgeVectors(System.Guid,System.Guid,System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Client.Implementations.VectorMethods.ExistsByGuid(System.Guid,System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Client.Implementations.VectorMethods.Search(LiteGraph.VectorSearchRequest)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Client.Implementations.VectorMethods.Search(LiteGraph.VectorSearchDomainEnum,LiteGraph.VectorSearchTypeEnum,System.Collections.Generic.List{System.Single},System.Guid,System.Nullable{System.Guid},System.Collections.Generic.List{System.String},System.Collections.Specialized.NameValueCollection,ExpressionTree.Expr)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Client.Implementations.VectorMethods.SearchGraph(LiteGraph.VectorSearchTypeEnum,System.Collections.Generic.List{System.Single},System.Guid,System.Collections.Generic.List{System.String},System.Collections.Specialized.NameValueCollection,ExpressionTree.Expr)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Client.Implementations.VectorMethods.SearchNode(LiteGraph.VectorSearchTypeEnum,System.Collections.Generic.List{System.Single},System.Guid,System.Guid,System.Collections.Generic.List{System.String},System.Collections.Specialized.NameValueCollection,ExpressionTree.Expr)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Client.Implementations.VectorMethods.SearchEdge(LiteGraph.VectorSearchTypeEnum,System.Collections.Generic.List{System.Single},System.Guid,System.Guid,System.Collections.Generic.List{System.String},System.Collections.Specialized.NameValueCollection,ExpressionTree.Expr)">
            <inheritdoc />
        </member>
        <member name="T:LiteGraph.Client.Interfaces.IAdminMethods">
            <summary>
            Interface for admin methods.
            Client implementations are responsible for input validation and cross-cutting logic.
            </summary>
        </member>
        <member name="M:LiteGraph.Client.Interfaces.IAdminMethods.Backup(System.String)">
            <summary>
            Backup request.
            </summary>
            <param name="outputFilename">Output filename.</param>
        </member>
        <member name="M:LiteGraph.Client.Interfaces.IAdminMethods.BackupReadAll">
            <summary>
            List backups request.
            </summary>
            <returns>Enumerable of backup files.</returns>
        </member>
        <member name="M:LiteGraph.Client.Interfaces.IAdminMethods.BackupRead(System.String)">
            <summary>
            Read the contents of a backup file.
            </summary>
            <param name="backupFilename">Backup filename.</param>
            <returns>File contents.</returns>
        </member>
        <member name="M:LiteGraph.Client.Interfaces.IAdminMethods.BackupEnumerate(LiteGraph.EnumerationQuery)">
            <summary>
            Enumerate objects.
            </summary>
            <param name="query">Enumeration query.</param>
            <returns>Enumeration result.</returns>
        </member>
        <member name="M:LiteGraph.Client.Interfaces.IAdminMethods.BackupExists(System.String)">
            <summary>
            Check if a backup file exists.
            </summary>
            <param name="backupFilename">Backup filename.</param>
            <returns>True if exists.</returns>
        </member>
        <member name="M:LiteGraph.Client.Interfaces.IAdminMethods.DeleteBackup(System.String)">
            <summary>
            Delete a backup file.
            </summary>
            <param name="backupFilename">Backup filename.</param>
        </member>
        <member name="T:LiteGraph.Client.Interfaces.IBatchMethods">
            <summary>
            Interface for batch methods.
            Client implementations are responsible for input validation and cross-cutting logic.
            </summary>
        </member>
        <member name="M:LiteGraph.Client.Interfaces.IBatchMethods.Existence(System.Guid,System.Guid,LiteGraph.ExistenceRequest)">
            <summary>
            Batch existence request.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="req">Existence request.</param>
            <returns>Existence result.</returns>
        </member>
        <member name="T:LiteGraph.Client.Interfaces.ICredentialMethods">
            <summary>
            Interface for credential methods.
            Client implementations are responsible for input validation and cross-cutting logic.
            </summary>
        </member>
        <member name="M:LiteGraph.Client.Interfaces.ICredentialMethods.Create(LiteGraph.Credential)">
            <summary>
            Create a credential.
            </summary>
            <param name="credential">Credential.</param>
            <returns>Credential.</returns>
        </member>
        <member name="M:LiteGraph.Client.Interfaces.ICredentialMethods.ReadAllInTenant(System.Guid,LiteGraph.EnumerationOrderEnum,System.Int32)">
            <summary>
            Read all credentials in a given tenant.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="order">Enumeration order.</param>
            <param name="skip">The number of records to skip.</param>
            <returns>Credentials.</returns>
        </member>
        <member name="M:LiteGraph.Client.Interfaces.ICredentialMethods.ReadMany(System.Nullable{System.Guid},System.Nullable{System.Guid},System.String,LiteGraph.EnumerationOrderEnum,System.Int32)">
            <summary>
            Read credentials.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="userGuid">User GUID.</param>
            <param name="bearerToken">Bearer token.</param>
            <param name="order">Enumeration order.</param>
            <param name="skip">Number of records to skip.</param>
            <returns>Credentials.</returns>
        </member>
        <member name="M:LiteGraph.Client.Interfaces.ICredentialMethods.ReadByGuid(System.Guid,System.Guid)">
            <summary>
            Read a credential by GUID.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="guid">GUID.</param>
            <returns>Credential.</returns>
        </member>
        <member name="M:LiteGraph.Client.Interfaces.ICredentialMethods.ReadByBearerToken(System.String)">
            <summary>
            Read a credential by bearer token.
            </summary>
            <param name="bearerToken">Bearer token.</param>
            <returns>Credential.</returns>
        </member>
        <member name="M:LiteGraph.Client.Interfaces.ICredentialMethods.Enumerate(LiteGraph.EnumerationQuery)">
            <summary>
            Enumerate objects.
            </summary>
            <param name="query">Enumeration query.</param>
            <returns>Enumeration result.</returns>
        </member>
        <member name="M:LiteGraph.Client.Interfaces.ICredentialMethods.Update(LiteGraph.Credential)">
            <summary>
            Update a credential.
            </summary>
            <param name="cred">Credential.</param>
            <returns>Credential.</returns>
        </member>
        <member name="M:LiteGraph.Client.Interfaces.ICredentialMethods.DeleteAllInTenant(System.Guid)">
            <summary>
            Delete credentials associated with a tenant.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
        </member>
        <member name="M:LiteGraph.Client.Interfaces.ICredentialMethods.DeleteByGuid(System.Guid,System.Guid)">
            <summary>
            Delete a credential.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="guid">GUID.</param>
        </member>
        <member name="M:LiteGraph.Client.Interfaces.ICredentialMethods.DeleteByUser(System.Guid,System.Guid)">
            <summary>
            Delete credentials associated with a user.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="userGuid">User GUID.</param>
        </member>
        <member name="M:LiteGraph.Client.Interfaces.ICredentialMethods.ExistsByGuid(System.Guid,System.Guid)">
            <summary>
            Check if a credential exists by GUID.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="guid">GUID.</param>
            <returns>True if exists.</returns>
        </member>
        <member name="T:LiteGraph.Client.Interfaces.IEdgeMethods">
            <summary>
            Interface for edge methods.
            Client implementations are responsible for input validation and cross-cutting logic.
            </summary>
        </member>
        <member name="M:LiteGraph.Client.Interfaces.IEdgeMethods.Create(LiteGraph.Edge)">
            <summary>
            Create an edge between two nodes.
            </summary>
            <param name="edge">Edge.</param>
            <returns>Edge.</returns>
        </member>
        <member name="M:LiteGraph.Client.Interfaces.IEdgeMethods.CreateMany(System.Guid,System.Guid,System.Collections.Generic.List{LiteGraph.Edge})">
            <summary>
            Create multiple edges.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="edges">Edges.</param>
            <returns>Edges.</returns>
        </member>
        <member name="M:LiteGraph.Client.Interfaces.IEdgeMethods.ReadAllInTenant(System.Guid,LiteGraph.EnumerationOrderEnum,System.Int32)">
            <summary>
            Read all edges in a given tenant.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="order">Enumeration order.</param>
            <param name="skip">The number of records to skip.</param>
            <returns>Edges.</returns>
        </member>
        <member name="M:LiteGraph.Client.Interfaces.IEdgeMethods.ReadAllInGraph(System.Guid,System.Guid,LiteGraph.EnumerationOrderEnum,System.Int32)">
            <summary>
            Read all edges in a given graph.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="order">Enumeration order.</param>
            <param name="skip">The number of records to skip.</param>
            <returns>Edges.</returns>
        </member>
        <member name="M:LiteGraph.Client.Interfaces.IEdgeMethods.ReadMany(System.Guid,System.Guid,System.Collections.Generic.List{System.String},System.Collections.Specialized.NameValueCollection,ExpressionTree.Expr,LiteGraph.EnumerationOrderEnum,System.Int32)">
            <summary>
            Read edges.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="labels">Labels.</param>
            <param name="tags">Tags.</param>
            <param name="edgeFilter">
            Edge filter expression for Data JSON body.
            Expression left terms must follow the form of Sqlite JSON paths.
            For example, to retrieve the 'Name' property, use '$.Name', OperatorEnum.Equals, '[name here]'.</param>
            <param name="order">Enumeration order.</param>
            <param name="skip">The number of records to skip.</param>
            <returns>Edges.</returns>
        </member>
        <member name="M:LiteGraph.Client.Interfaces.IEdgeMethods.ReadFirst(System.Guid,System.Guid,System.Collections.Generic.List{System.String},System.Collections.Specialized.NameValueCollection,ExpressionTree.Expr,LiteGraph.EnumerationOrderEnum)">
            <summary>
            Read first.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="labels">Labels.</param>
            <param name="tags">Tags.</param>
            <param name="edgeFilter">
            Edge filter expression for Data JSON body.
            Expression left terms must follow the form of Sqlite JSON paths.
            For example, to retrieve the 'Name' property, use '$.Name', OperatorEnum.Equals, '[name here]'.</param>
            <param name="order">Enumeration order.</param>
            <returns>Edge.</returns>
        </member>
        <member name="M:LiteGraph.Client.Interfaces.IEdgeMethods.ReadByGuid(System.Guid,System.Guid,System.Guid)">
            <summary>
            Read edge.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="edgeGuid">Edge GUID.</param>
            <returns>Edge.</returns>
        </member>
        <member name="M:LiteGraph.Client.Interfaces.IEdgeMethods.ReadNodeEdges(System.Guid,System.Guid,System.Guid,System.Collections.Generic.List{System.String},System.Collections.Specialized.NameValueCollection,ExpressionTree.Expr,LiteGraph.EnumerationOrderEnum,System.Int32)">
            <summary>
            Get edges connected to or initiated from a given node.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="nodeGuid">Node GUID.</param>
            <param name="labels">Labels.</param>
            <param name="tags">Tags upon which to filter edges.</param>
            <param name="edgeFilter">
            Edge filter expression for Data JSON body.
            Expression left terms must follow the form of Sqlite JSON paths.
            For example, to retrieve the 'Name' property, use '$.Name', OperatorEnum.Equals, '[name here]'.</param>
            <param name="order">Enumeration order.</param>
            <param name="skip">The number of records to skip.</param>
            <returns>Edges.</returns>
        </member>
        <member name="M:LiteGraph.Client.Interfaces.IEdgeMethods.ReadEdgesFromNode(System.Guid,System.Guid,System.Guid,System.Collections.Generic.List{System.String},System.Collections.Specialized.NameValueCollection,ExpressionTree.Expr,LiteGraph.EnumerationOrderEnum,System.Int32)">
            <summary>
            Get edges from a given node.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="nodeGuid">Node GUID.</param>
            <param name="labels">Labels.</param>
            <param name="tags">Tags upon which to filter edges.</param>
            <param name="edgeFilter">
            Edge filter expression for Data JSON body.
            Expression left terms must follow the form of Sqlite JSON paths.
            For example, to retrieve the 'Name' property, use '$.Name', OperatorEnum.Equals, '[name here]'.</param>
            <param name="order">Enumeration order.</param>
            <param name="skip">The number of records to skip.</param>
            <returns>Edges.</returns>
        </member>
        <member name="M:LiteGraph.Client.Interfaces.IEdgeMethods.ReadEdgesToNode(System.Guid,System.Guid,System.Guid,System.Collections.Generic.List{System.String},System.Collections.Specialized.NameValueCollection,ExpressionTree.Expr,LiteGraph.EnumerationOrderEnum,System.Int32)">
            <summary>
            Get edges to a given node.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="nodeGuid">Node GUID.</param>
            <param name="labels">Labels.</param>
            <param name="tags">Tags upon which to filter edges.</param>
            <param name="edgeFilter">
            Edge filter expression for Data JSON body.
            Expression left terms must follow the form of Sqlite JSON paths.
            For example, to retrieve the 'Name' property, use '$.Name', OperatorEnum.Equals, '[name here]'.</param>
            <param name="order">Enumeration order.</param>
            <param name="skip">The number of records to skip.</param>
            <returns>Edges.</returns>
        </member>
        <member name="M:LiteGraph.Client.Interfaces.IEdgeMethods.ReadEdgesBetweenNodes(System.Guid,System.Guid,System.Guid,System.Guid,System.Collections.Generic.List{System.String},System.Collections.Specialized.NameValueCollection,ExpressionTree.Expr,LiteGraph.EnumerationOrderEnum,System.Int32)">
            <summary>
            Get edges between two neighboring nodes.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="fromNodeGuid">From node GUID.</param>
            <param name="toNodeGuid">To node GUID.</param>
            <param name="labels">Labels.</param>
            <param name="tags">Tags upon which to filter edges.</param>
            <param name="edgeFilter">
            Edge filter expression for Data JSON body.
            Expression left terms must follow the form of Sqlite JSON paths.
            For example, to retrieve the 'Name' property, use '$.Name', OperatorEnum.Equals, '[name here]'.</param>
            <param name="order">Enumeration order.</param>
            <param name="skip">The number of records to skip.</param>
            <returns>Edges.</returns>
        </member>
        <member name="M:LiteGraph.Client.Interfaces.IEdgeMethods.Enumerate(LiteGraph.EnumerationQuery)">
            <summary>
            Enumerate objects.
            </summary>
            <param name="query">Enumeration query.</param>
            <returns>Enumeration result.</returns>
        </member>
        <member name="M:LiteGraph.Client.Interfaces.IEdgeMethods.Update(LiteGraph.Edge)">
            <summary>
            Update edge.
            </summary>
            <param name="edge">Edge.</param>
            <returns>Edge.</returns>
        </member>
        <member name="M:LiteGraph.Client.Interfaces.IEdgeMethods.DeleteByGuid(System.Guid,System.Guid,System.Guid)">
            <summary>
            Delete edge.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="edgeGuid">Edge GUID.</param>
        </member>
        <member name="M:LiteGraph.Client.Interfaces.IEdgeMethods.DeleteAllInTenant(System.Guid)">
            <summary>
            Delete all edges from a tenant.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
        </member>
        <member name="M:LiteGraph.Client.Interfaces.IEdgeMethods.DeleteAllInGraph(System.Guid,System.Guid)">
            <summary>
            Delete all edges from a graph.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
        </member>
        <member name="M:LiteGraph.Client.Interfaces.IEdgeMethods.DeleteMany(System.Guid,System.Guid,System.Collections.Generic.List{System.Guid})">
            <summary>
            Delete multiple edges from a graph.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="edgeGuids">Edge GUIDs.</param>
        </member>
        <member name="M:LiteGraph.Client.Interfaces.IEdgeMethods.DeleteNodeEdges(System.Guid,System.Guid,System.Guid)">
            <summary>
            Delete all edges associated with a given node.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="nodeGuid">Node GUID.</param>
        </member>
        <member name="M:LiteGraph.Client.Interfaces.IEdgeMethods.DeleteNodeEdges(System.Guid,System.Guid,System.Collections.Generic.List{System.Guid})">
            <summary>
            Delete all edges associated with a set of given nodes.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="nodeGuids">Node GUIDs.</param>
        </member>
        <member name="M:LiteGraph.Client.Interfaces.IEdgeMethods.ExistsByGuid(System.Guid,System.Guid,System.Guid)">
            <summary>
            Check if an edge exists by GUID.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="edgeGuid">Edge GUID.</param>
            <returns>True if exists.</returns>
        </member>
        <member name="T:LiteGraph.Client.Interfaces.IGraphMethods">
            <summary>
            Interface for graph methods.
            Client implementations are responsible for input validation and cross-cutting logic.
            </summary>
        </member>
        <member name="M:LiteGraph.Client.Interfaces.IGraphMethods.Create(LiteGraph.Graph)">
            <summary>
            Create a graph.
            </summary>
            <param name="graph">Graph.</param>
            <returns>Graph.</returns>
        </member>
        <member name="M:LiteGraph.Client.Interfaces.IGraphMethods.ReadAllInTenant(System.Guid,LiteGraph.EnumerationOrderEnum,System.Int32)">
            <summary>
            Read all graphs in a given tenant.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="order">Enumeration order.</param>
            <param name="skip">The number of records to skip.</param>
            <returns>Graphs.</returns>
        </member>
        <member name="M:LiteGraph.Client.Interfaces.IGraphMethods.ReadMany(System.Guid,System.Collections.Generic.List{System.String},System.Collections.Specialized.NameValueCollection,ExpressionTree.Expr,LiteGraph.EnumerationOrderEnum,System.Int32)">
            <summary>
            Read graphs.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="labels">Labels.</param>
            <param name="tags">Tags on which to match.</param>
            <param name="graphFilter">
            Graph filter expression for Data JSON body.
            Expression left terms must follow the form of Sqlite JSON paths.
            For example, to retrieve the 'Name' property, use '$.Name', OperatorEnum.Equals, '[name here]'.</param>
            <param name="order">Enumeration order.</param>
            <param name="skip">The number of records to skip.</param>
            <returns>Graphs.</returns>
        </member>
        <member name="M:LiteGraph.Client.Interfaces.IGraphMethods.ReadFirst(System.Guid,System.Collections.Generic.List{System.String},System.Collections.Specialized.NameValueCollection,ExpressionTree.Expr,LiteGraph.EnumerationOrderEnum)">
            <summary>
            Read first.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="labels">Labels.</param>
            <param name="tags">Tags on which to match.</param>
            <param name="graphFilter">
            Graph filter expression for Data JSON body.
            Expression left terms must follow the form of Sqlite JSON paths.
            For example, to retrieve the 'Name' property, use '$.Name', OperatorEnum.Equals, '[name here]'.</param>
            <param name="order">Enumeration order.</param>
            <returns>Graph.</returns>
        </member>
        <member name="M:LiteGraph.Client.Interfaces.IGraphMethods.ReadByGuid(System.Guid,System.Guid)">
            <summary>
            Read a graph by GUID.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="guid">GUID.</param>
            <returns>Graph.</returns>
        </member>
        <member name="M:LiteGraph.Client.Interfaces.IGraphMethods.Enumerate(LiteGraph.EnumerationQuery)">
            <summary>
            Enumerate objects.
            </summary>
            <param name="query">Enumeration query.</param>
            <returns>Enumeration result.</returns>
        </member>
        <member name="M:LiteGraph.Client.Interfaces.IGraphMethods.Update(LiteGraph.Graph)">
            <summary>
            Update a graph.
            </summary>
            <param name="graph">Graph.</param>
            <returns>Graph.</returns>
        </member>
        <member name="M:LiteGraph.Client.Interfaces.IGraphMethods.DeleteByGuid(System.Guid,System.Guid,System.Boolean)">
            <summary>
            Delete a graph.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="guid">GUID.</param>
            <param name="force">True to force deletion of nodes and edges.</param>
        </member>
        <member name="M:LiteGraph.Client.Interfaces.IGraphMethods.DeleteAllInTenant(System.Guid)">
            <summary>
            Delete graphs associated with a tenant.  Deletion is forceful.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
        </member>
        <member name="M:LiteGraph.Client.Interfaces.IGraphMethods.ExistsByGuid(System.Guid,System.Guid)">
            <summary>
            Check if a graph exists by GUID.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="guid">GUID.</param>
            <returns>True if exists.</returns>
        </member>
        <member name="M:LiteGraph.Client.Interfaces.IGraphMethods.GetStatistics(System.Guid,System.Guid)">
            <summary>
            Retrieve graph statistics.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="guid">Graph GUID.</param>
            <returns>Graph statistics.</returns>
        </member>
        <member name="M:LiteGraph.Client.Interfaces.IGraphMethods.GetStatistics(System.Guid)">
            <summary>
            Retrieve graph statistics.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <returns>Dictionary of graph statistics.</returns>
        </member>
        <member name="T:LiteGraph.Client.Interfaces.ILabelMethods">
            <summary>
            Interface for label methods.
            Client implementations are responsible for input validation and cross-cutting logic.
            </summary>
        </member>
        <member name="M:LiteGraph.Client.Interfaces.ILabelMethods.Create(LiteGraph.LabelMetadata)">
            <summary>
            Create a label.
            </summary>
            <param name="label">Label.</param>
            <returns>Label.</returns>
        </member>
        <member name="M:LiteGraph.Client.Interfaces.ILabelMethods.CreateMany(System.Guid,System.Collections.Generic.List{LiteGraph.LabelMetadata})">
            <summary>
            Create multiple labels.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="labels">Labels.</param>
            <returns>Labels.</returns>
        </member>
        <member name="M:LiteGraph.Client.Interfaces.ILabelMethods.ReadAllInTenant(System.Guid,LiteGraph.EnumerationOrderEnum,System.Int32)">
            <summary>
            Read all labels in a given tenant.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="order">Enumeration order.</param>
            <param name="skip">The number of records to skip.</param>
            <returns>Labels.</returns>
        </member>
        <member name="M:LiteGraph.Client.Interfaces.ILabelMethods.ReadAllInGraph(System.Guid,System.Guid,LiteGraph.EnumerationOrderEnum,System.Int32)">
            <summary>
            Read all labels in a given graph.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="order">Enumeration order.</param>
            <param name="skip">The number of records to skip.</param>
            <returns>Labels.</returns>
        </member>
        <member name="M:LiteGraph.Client.Interfaces.ILabelMethods.ReadMany(System.Guid,System.Nullable{System.Guid},System.Nullable{System.Guid},System.Nullable{System.Guid},System.String,LiteGraph.EnumerationOrderEnum,System.Int32)">
            <summary>
            Read labels.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="nodeGuid">Node GUID.</param>
            <param name="edgeGuid">Edge GUID.</param>
            <param name="label">Label.</param>
            <param name="order">Enumeration order.</param>
            <param name="skip">Number of records to skip.</param>
            <returns>Labels.</returns>
        </member>
        <member name="M:LiteGraph.Client.Interfaces.ILabelMethods.ReadManyGraph(System.Guid,System.Guid,LiteGraph.EnumerationOrderEnum,System.Int32)">
            <summary>
            Read graph labels.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="order">Enumeration order.</param>
            <param name="skip">Number of records to skip.</param>
            <returns>Labels.</returns>
        </member>
        <member name="M:LiteGraph.Client.Interfaces.ILabelMethods.ReadManyNode(System.Guid,System.Guid,System.Guid,LiteGraph.EnumerationOrderEnum,System.Int32)">
            <summary>
            Read node labels.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="nodeGuid">Node GUID.</param>
            <param name="order">Enumeration order.</param>
            <param name="skip">Number of records to skip.</param>
            <returns>Labels.</returns>
        </member>
        <member name="M:LiteGraph.Client.Interfaces.ILabelMethods.ReadManyEdge(System.Guid,System.Guid,System.Guid,LiteGraph.EnumerationOrderEnum,System.Int32)">
            <summary>
            Read edge labels.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="edgeGuid">Edge GUID.</param>
            <param name="order">Enumeration order.</param>
            <param name="skip">Number of records to skip.</param>
            <returns>Labels.</returns>
        </member>
        <member name="M:LiteGraph.Client.Interfaces.ILabelMethods.ReadByGuid(System.Guid,System.Guid)">
            <summary>
            Read a label by GUID.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="guid">GUID.</param>
            <returns>Label.</returns>
        </member>
        <member name="M:LiteGraph.Client.Interfaces.ILabelMethods.Enumerate(LiteGraph.EnumerationQuery)">
            <summary>
            Enumerate objects.
            </summary>
            <param name="query">Enumeration query.</param>
            <returns>Enumeration result.</returns>
        </member>
        <member name="M:LiteGraph.Client.Interfaces.ILabelMethods.Update(LiteGraph.LabelMetadata)">
            <summary>
            Update a label.
            </summary>
            <param name="label">Label.</param>
            <returns>Label.</returns>
        </member>
        <member name="M:LiteGraph.Client.Interfaces.ILabelMethods.DeleteByGuid(System.Guid,System.Guid)">
            <summary>
            Delete a label.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="guid">GUID.</param>
        </member>
        <member name="M:LiteGraph.Client.Interfaces.ILabelMethods.DeleteMany(System.Guid,System.Nullable{System.Guid},System.Collections.Generic.List{System.Guid},System.Collections.Generic.List{System.Guid})">
            <summary>
            Delete labels.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="nodeGuids">Node GUIDs.</param>
            <param name="edgeGuids">Edge GUIDs.</param>
        </member>
        <member name="M:LiteGraph.Client.Interfaces.ILabelMethods.DeleteMany(System.Guid,System.Collections.Generic.List{System.Guid})">
            <summary>
            Delete labels.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="guids">GUIDs.</param>
        </member>
        <member name="M:LiteGraph.Client.Interfaces.ILabelMethods.DeleteAllInTenant(System.Guid)">
            <summary>
            Delete all labels associated with a tenant.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
        </member>
        <member name="M:LiteGraph.Client.Interfaces.ILabelMethods.DeleteAllInGraph(System.Guid,System.Guid)">
            <summary>
            Delete all labels associated with a graph.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
        </member>
        <member name="M:LiteGraph.Client.Interfaces.ILabelMethods.DeleteGraphLabels(System.Guid,System.Guid)">
            <summary>
            Delete labels for the graph object itself, leaving subordinate node and edge labels in place.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
        </member>
        <member name="M:LiteGraph.Client.Interfaces.ILabelMethods.DeleteNodeLabels(System.Guid,System.Guid,System.Guid)">
            <summary>
            Delete node labels.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="nodeGuid">Node GUID.</param>
        </member>
        <member name="M:LiteGraph.Client.Interfaces.ILabelMethods.DeleteEdgeLabels(System.Guid,System.Guid,System.Guid)">
            <summary>
            Delete edge labels.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="edgeGuid">Edge GUID.</param>
        </member>
        <member name="M:LiteGraph.Client.Interfaces.ILabelMethods.ExistsByGuid(System.Guid,System.Guid)">
            <summary>
            Check if a label exists by GUID.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="guid">GUID.</param>
            <returns>True if exists.</returns>
        </member>
        <member name="T:LiteGraph.Client.Interfaces.INodeMethods">
            <summary>
            Interface for node methods.
            Client implementations are responsible for input validation and cross-cutting logic.
            </summary>
        </member>
        <member name="M:LiteGraph.Client.Interfaces.INodeMethods.Create(LiteGraph.Node)">
            <summary>
            Create a node.
            </summary>
            <param name="node">Node.</param>
            <returns>Node.</returns>
        </member>
        <member name="M:LiteGraph.Client.Interfaces.INodeMethods.CreateMany(System.Guid,System.Guid,System.Collections.Generic.List{LiteGraph.Node})">
            <summary>
            Create multiple nodes.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="nodes">Nodes.</param>
            <returns>Nodes.</returns>
        </member>
        <member name="M:LiteGraph.Client.Interfaces.INodeMethods.ReadAllInTenant(System.Guid,LiteGraph.EnumerationOrderEnum,System.Int32)">
            <summary>
            Read all nodes in a given tenant.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="order">Enumeration order.</param>
            <param name="skip">The number of records to skip.</param>
            <returns>Nodes.</returns>
        </member>
        <member name="M:LiteGraph.Client.Interfaces.INodeMethods.ReadAllInGraph(System.Guid,System.Guid,LiteGraph.EnumerationOrderEnum,System.Int32)">
            <summary>
            Read all nodes in a given graph.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="order">Enumeration order.</param>
            <param name="skip">The number of records to skip.</param>
            <returns>Nodes.</returns>
        </member>
        <member name="M:LiteGraph.Client.Interfaces.INodeMethods.ReadFirst(System.Guid,System.Guid,System.Collections.Generic.List{System.String},System.Collections.Specialized.NameValueCollection,ExpressionTree.Expr,LiteGraph.EnumerationOrderEnum)">
            <summary>
            Read first.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="labels">Labels.</param>
            <param name="tags">Tags.</param>
            <param name="nodeFilter">
            Node filter expression for Data JSON body.  
            Expression left terms must follow the form of Sqlite JSON paths.
            For example, to retrieve the 'Name' property, use '$.Name', OperatorEnum.Equals, '[name here]'.</param>
            <param name="order">Enumeration order.</param>
            <returns>Nodes.</returns>
        </member>
        <member name="M:LiteGraph.Client.Interfaces.INodeMethods.ReadMany(System.Guid,System.Guid,System.Collections.Generic.List{System.String},System.Collections.Specialized.NameValueCollection,ExpressionTree.Expr,LiteGraph.EnumerationOrderEnum,System.Int32)">
            <summary>
            Read nodes.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="labels">Labels.</param>
            <param name="tags">Tags.</param>
            <param name="nodeFilter">
            Node filter expression for Data JSON body.  
            Expression left terms must follow the form of Sqlite JSON paths.
            For example, to retrieve the 'Name' property, use '$.Name', OperatorEnum.Equals, '[name here]'.</param>
            <param name="order">Enumeration order.</param>
            <param name="skip">The number of records to skip.</param>
            <returns>Nodes.</returns>
        </member>
        <member name="M:LiteGraph.Client.Interfaces.INodeMethods.ReadMostConnected(System.Guid,System.Guid,System.Collections.Generic.List{System.String},System.Collections.Specialized.NameValueCollection,ExpressionTree.Expr,System.Int32)">
            <summary>
            Read the most connected nodes.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="labels">Labels.</param>
            <param name="tags">Tags.</param>
            <param name="nodeFilter">
            Node filter expression for Data JSON body.  
            Expression left terms must follow the form of Sqlite JSON paths.
            For example, to retrieve the 'Name' property, use '$.Name', OperatorEnum.Equals, '[name here]'.</param>
            <param name="skip">The number of records to skip.</param>
            <returns>Nodes.</returns>
        </member>
        <member name="M:LiteGraph.Client.Interfaces.INodeMethods.ReadLeastConnected(System.Guid,System.Guid,System.Collections.Generic.List{System.String},System.Collections.Specialized.NameValueCollection,ExpressionTree.Expr,System.Int32)">
            <summary>
            Read the least connected nodes.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="labels">Labels.</param>
            <param name="tags">Tags.</param>
            <param name="nodeFilter">
            Node filter expression for Data JSON body.  
            Expression left terms must follow the form of Sqlite JSON paths.
            For example, to retrieve the 'Name' property, use '$.Name', OperatorEnum.Equals, '[name here]'.</param>
            <param name="skip">The number of records to skip.</param>
            <returns>Nodes.</returns>
        </member>
        <member name="M:LiteGraph.Client.Interfaces.INodeMethods.ReadByGuid(System.Guid,System.Guid,System.Guid)">
            <summary>
            Read node.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="nodeGuid">Node GUID.</param>
            <returns>Node.</returns>
        </member>
        <member name="M:LiteGraph.Client.Interfaces.INodeMethods.Enumerate(LiteGraph.EnumerationQuery)">
            <summary>
            Enumerate objects.
            </summary>
            <param name="query">Enumeration query.</param>
            <returns>Enumeration result.</returns>
        </member>
        <member name="M:LiteGraph.Client.Interfaces.INodeMethods.Update(LiteGraph.Node)">
            <summary>
            Update node.
            </summary>
            <param name="node"></param>
            <returns>Node.</returns>
        </member>
        <member name="M:LiteGraph.Client.Interfaces.INodeMethods.DeleteByGuid(System.Guid,System.Guid,System.Guid)">
            <summary>
            Delete a node and all associated edges.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="nodeGuid">Node GUID.</param>
        </member>
        <member name="M:LiteGraph.Client.Interfaces.INodeMethods.DeleteAllInTenant(System.Guid)">
            <summary>
            Delete all nodes from a tenant.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
        </member>
        <member name="M:LiteGraph.Client.Interfaces.INodeMethods.DeleteAllInGraph(System.Guid,System.Guid)">
            <summary>
            Delete all nodes from a graph.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
        </member>
        <member name="M:LiteGraph.Client.Interfaces.INodeMethods.DeleteMany(System.Guid,System.Guid,System.Collections.Generic.List{System.Guid})">
            <summary>
            Delete multiple nodes from a graph.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="nodeGuids">Node GUIDs.</param>
        </member>
        <member name="M:LiteGraph.Client.Interfaces.INodeMethods.ExistsByGuid(System.Guid,System.Guid,System.Guid)">
            <summary>
            Check existence of a node.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="nodeGuid">Node GUID.</param>
            <returns>True if exists.</returns>
        </member>
        <member name="M:LiteGraph.Client.Interfaces.INodeMethods.ReadParents(System.Guid,System.Guid,System.Guid,LiteGraph.EnumerationOrderEnum,System.Int32)">
            <summary>
            Get nodes that have edges connecting to the specified node.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="nodeGuid">Node GUID.</param>
            <param name="order">Enumeration order.</param>
            <param name="skip">The number of records to skip.</param>
            <returns>Nodes.</returns>
        </member>
        <member name="M:LiteGraph.Client.Interfaces.INodeMethods.ReadChildren(System.Guid,System.Guid,System.Guid,LiteGraph.EnumerationOrderEnum,System.Int32)">
            <summary>
            Get nodes to which the specified node has connecting edges connecting.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="nodeGuid">Node GUID.</param>
            <param name="order">Enumeration order.</param>
            <param name="skip">The number of records to skip.</param>
            <returns>Nodes.</returns>
        </member>
        <member name="M:LiteGraph.Client.Interfaces.INodeMethods.ReadNeighbors(System.Guid,System.Guid,System.Guid,LiteGraph.EnumerationOrderEnum,System.Int32)">
            <summary>
            Get neighbors for a given node.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="nodeGuid">Node GUID.</param>
            <param name="order">Enumeration order.</param>
            <param name="skip">The number of records to skip.</param>
            <returns>Nodes.</returns>
        </member>
        <member name="M:LiteGraph.Client.Interfaces.INodeMethods.ReadRoutes(LiteGraph.SearchTypeEnum,System.Guid,System.Guid,System.Guid,System.Guid,ExpressionTree.Expr,ExpressionTree.Expr)">
            <summary>
            Get routes between two nodes.
            </summary>
            <param name="searchType">Search type.</param>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="fromNodeGuid">From node GUID.</param>
            <param name="toNodeGuid">To node GUID.</param>
            <param name="edgeFilter">
            Edge filter expression for Data JSON body.
            Expression left terms must follow the form of Sqlite JSON paths.
            For example, to retrieve the 'Name' property, use '$.Name', OperatorEnum.Equals, '[name here]'.</param>
            <param name="nodeFilter">
            Node filter expression for Data JSON body.
            Expression left terms must follow the form of Sqlite JSON paths.
            For example, to retrieve the 'Name' property, use '$.Name', OperatorEnum.Equals, '[name here]'.</param>
            <returns>Route details.</returns>
        </member>
        <member name="T:LiteGraph.Client.Interfaces.ITagMethods">
            <summary>
            Interface for tag methods.
            Client implementations are responsible for input validation and cross-cutting logic.
            </summary>
        </member>
        <member name="M:LiteGraph.Client.Interfaces.ITagMethods.Create(LiteGraph.TagMetadata)">
            <summary>
            Create a tag.
            </summary>
            <param name="tag">Tag.</param>
            <returns>Tag.</returns>
        </member>
        <member name="M:LiteGraph.Client.Interfaces.ITagMethods.CreateMany(System.Guid,System.Collections.Generic.List{LiteGraph.TagMetadata})">
            <summary>
            Create multiple tags.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="tags">Tags.</param>
            <returns>Tags.</returns>
        </member>
        <member name="M:LiteGraph.Client.Interfaces.ITagMethods.ReadAllInTenant(System.Guid,LiteGraph.EnumerationOrderEnum,System.Int32)">
            <summary>
            Read all tags in a given tenant.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="order">Enumeration order.</param>
            <param name="skip">The number of records to skip.</param>
            <returns>Tags.</returns>
        </member>
        <member name="M:LiteGraph.Client.Interfaces.ITagMethods.ReadAllInGraph(System.Guid,System.Guid,LiteGraph.EnumerationOrderEnum,System.Int32)">
            <summary>
            Read all tags in a given graph.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="order">Enumeration order.</param>
            <param name="skip">The number of records to skip.</param>
            <returns>Tags.</returns>
        </member>
        <member name="M:LiteGraph.Client.Interfaces.ITagMethods.ReadMany(System.Guid,System.Nullable{System.Guid},System.Nullable{System.Guid},System.Nullable{System.Guid},System.String,System.String,LiteGraph.EnumerationOrderEnum,System.Int32)">
            <summary>
            Read tags.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="nodeGuid">Node GUID.</param>
            <param name="edgeGuid">Edge GUID.</param>
            <param name="key">Key.</param>
            <param name="val">Value.</param>
            <param name="order">Enumeration order.</param>
            <param name="skip">Number of records to skip.</param>
            <returns>Tags.</returns>
        </member>
        <member name="M:LiteGraph.Client.Interfaces.ITagMethods.ReadManyGraph(System.Guid,System.Guid,LiteGraph.EnumerationOrderEnum,System.Int32)">
            <summary>
            Read graph tags.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="order">Enumeration order.</param>
            <param name="skip">Number of records to skip.</param>
            <returns>Tags.</returns>
        </member>
        <member name="M:LiteGraph.Client.Interfaces.ITagMethods.ReadManyNode(System.Guid,System.Guid,System.Guid,LiteGraph.EnumerationOrderEnum,System.Int32)">
            <summary>
            Read node tags.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="nodeGuid">Node GUID.</param>
            <param name="order">Enumeration order.</param>
            <param name="skip">Number of records to skip.</param>
            <returns>Tags.</returns>
        </member>
        <member name="M:LiteGraph.Client.Interfaces.ITagMethods.ReadManyEdge(System.Guid,System.Guid,System.Guid,LiteGraph.EnumerationOrderEnum,System.Int32)">
            <summary>
            Read edge tags.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="edgeGuid">Edge GUID.</param>
            <param name="order">Enumeration order.</param>
            <param name="skip">Number of records to skip.</param>
            <returns>Tags.</returns>
        </member>
        <member name="M:LiteGraph.Client.Interfaces.ITagMethods.ReadByGuid(System.Guid,System.Guid)">
            <summary>
            Read a tag by GUID.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="guid">GUID.</param>
            <returns>Tag.</returns>
        </member>
        <member name="M:LiteGraph.Client.Interfaces.ITagMethods.Enumerate(LiteGraph.EnumerationQuery)">
            <summary>
            Enumerate objects.
            </summary>
            <param name="query">Enumeration query.</param>
            <returns>Enumeration result.</returns>
        </member>
        <member name="M:LiteGraph.Client.Interfaces.ITagMethods.Update(LiteGraph.TagMetadata)">
            <summary>
            Update a tag.
            </summary>
            <param name="tag">Tag.</param>
            <returns>Tag.</returns>
        </member>
        <member name="M:LiteGraph.Client.Interfaces.ITagMethods.DeleteByGuid(System.Guid,System.Guid)">
            <summary>
            Delete a tag.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="guid">GUID.</param>
        </member>
        <member name="M:LiteGraph.Client.Interfaces.ITagMethods.DeleteMany(System.Guid,System.Nullable{System.Guid},System.Collections.Generic.List{System.Guid},System.Collections.Generic.List{System.Guid})">
            <summary>
            Delete tags.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="nodeGuids">Node GUIDs.</param>
            <param name="edgeGuids">Edge GUIDs.</param>
        </member>
        <member name="M:LiteGraph.Client.Interfaces.ITagMethods.DeleteMany(System.Guid,System.Collections.Generic.List{System.Guid})">
            <summary>
            Delete tags.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="guids">GUIDs.</param>
        </member>
        <member name="M:LiteGraph.Client.Interfaces.ITagMethods.DeleteAllInTenant(System.Guid)">
            <summary>
            Delete all tags associated with a tenant.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
        </member>
        <member name="M:LiteGraph.Client.Interfaces.ITagMethods.DeleteAllInGraph(System.Guid,System.Guid)">
            <summary>
            Delete all tags associated with a graph.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
        </member>
        <member name="M:LiteGraph.Client.Interfaces.ITagMethods.DeleteGraphTags(System.Guid,System.Guid)">
            <summary>
            Delete tags for the graph object itself, leaving subordinate node and edge tags in place.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
        </member>
        <member name="M:LiteGraph.Client.Interfaces.ITagMethods.DeleteNodeTags(System.Guid,System.Guid,System.Guid)">
            <summary>
            Delete node tags.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="nodeGuid">Node GUID.</param>
        </member>
        <member name="M:LiteGraph.Client.Interfaces.ITagMethods.DeleteEdgeTags(System.Guid,System.Guid,System.Guid)">
            <summary>
            Delete edge tags.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="edgeGuid">Edge GUID.</param>
        </member>
        <member name="M:LiteGraph.Client.Interfaces.ITagMethods.ExistsByGuid(System.Guid,System.Guid)">
            <summary>
            Check if a tag exists by GUID.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="guid">GUID.</param>
            <returns>True if exists.</returns>
        </member>
        <member name="T:LiteGraph.Client.Interfaces.ITenantMethods">
            <summary>
            Interface for tenant methods.
            Client implementations are responsible for input validation and cross-cutting logic.
            </summary>
        </member>
        <member name="M:LiteGraph.Client.Interfaces.ITenantMethods.Create(LiteGraph.TenantMetadata)">
            <summary>
            Create a tenant.
            </summary>
            <param name="tenant">Tenant.</param>
            <returns>Tenant.</returns>
        </member>
        <member name="M:LiteGraph.Client.Interfaces.ITenantMethods.ReadMany(LiteGraph.EnumerationOrderEnum,System.Int32)">
            <summary>
            Read tenants.
            </summary>
            <param name="order">Enumeration order.</param>
            <param name="skip">The number of records to skip.</param>
            <returns>Tenants.</returns>
        </member>
        <member name="M:LiteGraph.Client.Interfaces.ITenantMethods.ReadByGuid(System.Guid)">
            <summary>
            Read a tenant by GUID.
            </summary>
            <param name="guid">GUID.</param>
            <returns>Tenant.</returns>
        </member>
        <member name="M:LiteGraph.Client.Interfaces.ITenantMethods.Enumerate(LiteGraph.EnumerationQuery)">
            <summary>
            Enumerate objects.
            </summary>
            <param name="query">Enumeration query.</param>
            <returns>Enumeration result.</returns>
        </member>
        <member name="M:LiteGraph.Client.Interfaces.ITenantMethods.Update(LiteGraph.TenantMetadata)">
            <summary>
            Update a tenant.
            </summary>
            <param name="tenant">Tenant.</param>
            <returns>Tenant.</returns>
        </member>
        <member name="M:LiteGraph.Client.Interfaces.ITenantMethods.DeleteByGuid(System.Guid,System.Boolean)">
            <summary>
            Delete a tenant.
            </summary>
            <param name="guid">GUID.</param>
            <param name="force">True to force deletion of users and credentials.</param>
        </member>
        <member name="M:LiteGraph.Client.Interfaces.ITenantMethods.ExistsByGuid(System.Guid)">
            <summary>
            Check if a tenant exists by GUID.
            </summary>
            <param name="guid">GUID.</param>
            <returns>True if exists.</returns>
        </member>
        <member name="M:LiteGraph.Client.Interfaces.ITenantMethods.GetStatistics(System.Guid)">
            <summary>
            Retrieve tenant statistics.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <returns>Tenant statistics.</returns>
        </member>
        <member name="M:LiteGraph.Client.Interfaces.ITenantMethods.GetStatistics">
            <summary>
            Retrieve tenant statistics.
            </summary>
            <returns>Dictionary of tenant statistics.</returns>
        </member>
        <member name="T:LiteGraph.Client.Interfaces.IUserMethods">
            <summary>
            Interface for user methods.
            Client implementations are responsible for input validation and cross-cutting logic.
            </summary>
        </member>
        <member name="M:LiteGraph.Client.Interfaces.IUserMethods.Create(LiteGraph.UserMaster)">
            <summary>
            Create a user.
            </summary>
            <param name="user">User.</param>
            <returns>User.</returns>
        </member>
        <member name="M:LiteGraph.Client.Interfaces.IUserMethods.ReadAllInTenant(System.Guid,LiteGraph.EnumerationOrderEnum,System.Int32)">
            <summary>
            Read all users in a given tenant.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="order">Enumeration order.</param>
            <param name="skip">The number of records to skip.</param>
            <returns>Users.</returns>
        </member>
        <member name="M:LiteGraph.Client.Interfaces.IUserMethods.ReadMany(System.Nullable{System.Guid},System.String,LiteGraph.EnumerationOrderEnum,System.Int32)">
            <summary>
            Read users.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="email">Email.</param>
            <param name="order">Enumeration order.</param>
            <param name="skip">Number of records to skip.</param>
            <returns>Users.</returns>
        </member>
        <member name="M:LiteGraph.Client.Interfaces.IUserMethods.ReadByGuid(System.Guid,System.Guid)">
            <summary>
            Read a user by GUID.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="guid">GUID.</param>
            <returns>User.</returns>
        </member>
        <member name="M:LiteGraph.Client.Interfaces.IUserMethods.ReadTenantsByEmail(System.String)">
            <summary>
            Read tenants associated with a given email address.
            </summary>
            <param name="email">Email address.</param>
            <returns>List of tenants.</returns>
        </member>
        <member name="M:LiteGraph.Client.Interfaces.IUserMethods.ReadByEmail(System.Guid,System.String)">
            <summary>
            Read a user by email.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="email">Email.</param>
            <returns>User.</returns>
        </member>
        <member name="M:LiteGraph.Client.Interfaces.IUserMethods.Enumerate(LiteGraph.EnumerationQuery)">
            <summary>
            Enumerate objects.
            </summary>
            <param name="query">Enumeration query.</param>
            <returns>Enumeration result.</returns>
        </member>
        <member name="M:LiteGraph.Client.Interfaces.IUserMethods.Update(LiteGraph.UserMaster)">
            <summary>
            Update a user.
            </summary>
            <param name="user">User.</param>
            <returns>User.</returns>
        </member>
        <member name="M:LiteGraph.Client.Interfaces.IUserMethods.DeleteByGuid(System.Guid,System.Guid)">
            <summary>
            Delete a user.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="guid">GUID.</param>
        </member>
        <member name="M:LiteGraph.Client.Interfaces.IUserMethods.DeleteAllInTenant(System.Guid)">
            <summary>
            Delete users associated with a tenant.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
        </member>
        <member name="M:LiteGraph.Client.Interfaces.IUserMethods.ExistsByGuid(System.Guid,System.Guid)">
            <summary>
            Check if a user exists by GUID.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="guid">GUID.</param>
            <returns>True if exists.</returns>
        </member>
        <member name="M:LiteGraph.Client.Interfaces.IUserMethods.ExistsByEmail(System.Guid,System.String)">
            <summary>
            Check if a user exists by email.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="email">Email.</param>
            <returns>True if exists.</returns>
        </member>
        <member name="T:LiteGraph.Client.Interfaces.IVectorMethods">
            <summary>
            Interface for vector methods.
            Client implementations are responsible for input validation and cross-cutting logic.
            </summary>
        </member>
        <member name="M:LiteGraph.Client.Interfaces.IVectorMethods.Create(LiteGraph.VectorMetadata)">
            <summary>
            Create a vector.
            </summary>
            <param name="vector">Vector.</param>
            <returns>Vector.</returns>
        </member>
        <member name="M:LiteGraph.Client.Interfaces.IVectorMethods.CreateMany(System.Guid,System.Collections.Generic.List{LiteGraph.VectorMetadata})">
            <summary>
            Create multiple vectors.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="vectors">Vectors.</param>
            <returns>Vectors.</returns>
        </member>
        <member name="M:LiteGraph.Client.Interfaces.IVectorMethods.ReadAllInTenant(System.Guid,LiteGraph.EnumerationOrderEnum,System.Int32)">
            <summary>
            Read all vectors in a given tenant.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="order">Enumeration order.</param>
            <param name="skip">The number of records to skip.</param>
            <returns>Vectors.</returns>
        </member>
        <member name="M:LiteGraph.Client.Interfaces.IVectorMethods.ReadAllInGraph(System.Guid,System.Guid,LiteGraph.EnumerationOrderEnum,System.Int32)">
            <summary>
            Read all vectors in a given graph.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="order">Enumeration order.</param>
            <param name="skip">The number of records to skip.</param>
            <returns>Vectors.</returns>
        </member>
        <member name="M:LiteGraph.Client.Interfaces.IVectorMethods.ReadMany(System.Guid,System.Nullable{System.Guid},System.Nullable{System.Guid},System.Nullable{System.Guid},LiteGraph.EnumerationOrderEnum,System.Int32)">
            <summary>
            Read vectors.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="nodeGuid">Node GUID.</param>
            <param name="edgeGuid">Edge GUID.</param>
            <param name="order">Enumeration order.</param>
            <param name="skip">Number of records to skip.</param>
            <returns>Vectors.</returns>
        </member>
        <member name="M:LiteGraph.Client.Interfaces.IVectorMethods.ReadManyGraph(System.Guid,System.Guid,LiteGraph.EnumerationOrderEnum,System.Int32)">
            <summary>
            Read graph vectors.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="order">Enumeration order.</param>
            <param name="skip">Number of records to skip.</param>
            <returns>Vectors.</returns>
        </member>
        <member name="M:LiteGraph.Client.Interfaces.IVectorMethods.ReadManyNode(System.Guid,System.Guid,System.Guid,LiteGraph.EnumerationOrderEnum,System.Int32)">
            <summary>
            Read node vectors.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="nodeGuid">Node GUID.</param>
            <param name="order">Enumeration order.</param>
            <param name="skip">Number of records to skip.</param>
            <returns>Vectors.</returns>
        </member>
        <member name="M:LiteGraph.Client.Interfaces.IVectorMethods.ReadManyEdge(System.Guid,System.Guid,System.Guid,LiteGraph.EnumerationOrderEnum,System.Int32)">
            <summary>
            Read edge vectors.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="edgeGuid">Edge GUID.</param>
            <param name="order">Enumeration order.</param>
            <param name="skip">Number of records to skip.</param>
            <returns>Vectors.</returns>
        </member>
        <member name="M:LiteGraph.Client.Interfaces.IVectorMethods.ReadByGuid(System.Guid,System.Guid)">
            <summary>
            Read a vector by GUID.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="guid">GUID.</param>
            <returns>Vector.</returns>
        </member>
        <member name="M:LiteGraph.Client.Interfaces.IVectorMethods.Enumerate(LiteGraph.EnumerationQuery)">
            <summary>
            Enumerate objects.
            </summary>
            <param name="query">Enumeration query.</param>
            <returns>Enumeration result.</returns>
        </member>
        <member name="M:LiteGraph.Client.Interfaces.IVectorMethods.Update(LiteGraph.VectorMetadata)">
            <summary>
            Update a vector.
            </summary>
            <param name="vector">Vector.</param>
            <returns>Vector.</returns>
        </member>
        <member name="M:LiteGraph.Client.Interfaces.IVectorMethods.DeleteByGuid(System.Guid,System.Guid)">
            <summary>
            Delete a vector.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="guid">GUID.</param>
        </member>
        <member name="M:LiteGraph.Client.Interfaces.IVectorMethods.DeleteMany(System.Guid,System.Nullable{System.Guid},System.Collections.Generic.List{System.Guid},System.Collections.Generic.List{System.Guid})">
            <summary>
            Delete vectors.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="nodeGuids">Node GUIDs.</param>
            <param name="edgeGuids">Edge GUIDs.</param>
        </member>
        <member name="M:LiteGraph.Client.Interfaces.IVectorMethods.DeleteMany(System.Guid,System.Collections.Generic.List{System.Guid})">
            <summary>
            Delete vectors.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="guids">GUIDs.</param>
        </member>
        <member name="M:LiteGraph.Client.Interfaces.IVectorMethods.DeleteAllInTenant(System.Guid)">
            <summary>
            Delete all vectors associated with a tenant.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
        </member>
        <member name="M:LiteGraph.Client.Interfaces.IVectorMethods.DeleteAllInGraph(System.Guid,System.Guid)">
            <summary>
            Delete all vectors associated with a graph.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
        </member>
        <member name="M:LiteGraph.Client.Interfaces.IVectorMethods.DeleteGraphVectors(System.Guid,System.Guid)">
            <summary>
            Delete vectors for the graph object itself, leaving subordinate node and edge tags in place.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
        </member>
        <member name="M:LiteGraph.Client.Interfaces.IVectorMethods.DeleteNodeVectors(System.Guid,System.Guid,System.Guid)">
            <summary>
            Delete vectors for a node object.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="nodeGuid">Node GUID.</param>
        </member>
        <member name="M:LiteGraph.Client.Interfaces.IVectorMethods.DeleteEdgeVectors(System.Guid,System.Guid,System.Guid)">
            <summary>
            Delete vectors for an edge object.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="edgeGuid">Edge GUID.</param>
        </member>
        <member name="M:LiteGraph.Client.Interfaces.IVectorMethods.ExistsByGuid(System.Guid,System.Guid)">
            <summary>
            Check if a vector exists by GUID.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="guid">GUID.</param>
            <returns>True if exists.</returns>
        </member>
        <member name="M:LiteGraph.Client.Interfaces.IVectorMethods.Search(LiteGraph.VectorSearchRequest)">
            <summary>
            Search vectors.
            </summary>
            <param name="req">Search request.</param>
            <returns>Vector search results.</returns>
        </member>
        <member name="M:LiteGraph.Client.Interfaces.IVectorMethods.SearchGraph(LiteGraph.VectorSearchTypeEnum,System.Collections.Generic.List{System.Single},System.Guid,System.Collections.Generic.List{System.String},System.Collections.Specialized.NameValueCollection,ExpressionTree.Expr)">
            <summary>
            Search graph vectors.
            </summary>
            <param name="searchType">Vector search type.</param>
            <param name="vectors">Vectors.</param>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="labels">Labels.</param>
            <param name="tags">Tags.</param>
            <param name="filter">Filter.</param>
            <returns>Vector search results containing graphs.</returns>
        </member>
        <member name="M:LiteGraph.Client.Interfaces.IVectorMethods.SearchNode(LiteGraph.VectorSearchTypeEnum,System.Collections.Generic.List{System.Single},System.Guid,System.Guid,System.Collections.Generic.List{System.String},System.Collections.Specialized.NameValueCollection,ExpressionTree.Expr)">
            <summary>
            Search node vectors.
            </summary>
            <param name="searchType">Vector search type.</param>
            <param name="vectors">Vectors.</param>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="labels">Labels.</param>
            <param name="tags">Tags.</param>
            <param name="filter">Filter.</param>
            <returns>Vector search results containing nodes.</returns>
        </member>
        <member name="M:LiteGraph.Client.Interfaces.IVectorMethods.SearchEdge(LiteGraph.VectorSearchTypeEnum,System.Collections.Generic.List{System.Single},System.Guid,System.Guid,System.Collections.Generic.List{System.String},System.Collections.Specialized.NameValueCollection,ExpressionTree.Expr)">
            <summary>
            Search edge vectors.
            </summary>
            <param name="searchType">Vector search type.</param>
            <param name="vectors">Vectors.</param>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="labels">Labels.</param>
            <param name="tags">Tags.</param>
            <param name="filter">Filter.</param>
            <returns>Vector search results containing edges.</returns>
        </member>
        <member name="T:LiteGraph.Constants">
            <summary>
            Constants.
            </summary>
        </member>
        <member name="F:LiteGraph.Constants.LogDirectory">
            <summary>
            Log file directory.
            </summary>
        </member>
        <member name="F:LiteGraph.Constants.LogFilename">
            <summary>
            Log filename.
            </summary>
        </member>
        <member name="T:LiteGraph.Credential">
            <summary>
            Credentials.
            </summary>
        </member>
        <member name="P:LiteGraph.Credential.GUID">
            <summary>
            GUID.
            </summary>
        </member>
        <member name="P:LiteGraph.Credential.TenantGUID">
            <summary>
            Tenant GUID.
            </summary>
        </member>
        <member name="P:LiteGraph.Credential.UserGUID">
            <summary>
            User GUID.
            </summary>
        </member>
        <member name="P:LiteGraph.Credential.Name">
            <summary>
            Name.
            </summary>
        </member>
        <member name="P:LiteGraph.Credential.BearerToken">
            <summary>
            Access key.
            </summary>
        </member>
        <member name="P:LiteGraph.Credential.Active">
            <summary>
            Active.
            </summary>
        </member>
        <member name="P:LiteGraph.Credential.CreatedUtc">
            <summary>
            Creation timestamp, in UTC.
            </summary>
        </member>
        <member name="P:LiteGraph.Credential.LastUpdateUtc">
            <summary>
            Timestamp from last update, in UTC.
            </summary>
        </member>
        <member name="M:LiteGraph.Credential.#ctor">
            <summary>
            Instantiate.
            </summary>
        </member>
        <member name="T:LiteGraph.Edge">
            <summary>
            Edge in the graph.
            </summary>
        </member>
        <member name="P:LiteGraph.Edge.TenantGUID">
            <summary>
            Tenant GUID.
            </summary>
        </member>
        <member name="P:LiteGraph.Edge.GUID">
            <summary>
            Globally-unique identifier.
            </summary>
        </member>
        <member name="P:LiteGraph.Edge.GraphGUID">
            <summary>
            Globally-unique identifier for the graph.
            </summary>
        </member>
        <member name="P:LiteGraph.Edge.Name">
            <summary>
            Name.
            </summary>
        </member>
        <member name="P:LiteGraph.Edge.From">
            <summary>
            Globally-unique identifier of the from node.
            </summary>
        </member>
        <member name="P:LiteGraph.Edge.FromNode">
            <summary>
            From node.  This property is only populated when retrieving routes.
            </summary>
        </member>
        <member name="P:LiteGraph.Edge.To">
            <summary>
            Globally-unique identifier of the to node.
            </summary>
        </member>
        <member name="P:LiteGraph.Edge.ToNode">
            <summary>
            To node.  This property is only populated when retrieving routes.
            </summary>
        </member>
        <member name="P:LiteGraph.Edge.Cost">
            <summary>
            Cost.
            </summary>
        </member>
        <member name="P:LiteGraph.Edge.CreatedUtc">
            <summary>
            Timestamp from creation, in UTC.
            </summary>
        </member>
        <member name="P:LiteGraph.Edge.LastUpdateUtc">
            <summary>
            Timestamp from last update, in UTC.
            </summary>
        </member>
        <member name="P:LiteGraph.Edge.Labels">
            <summary>
            Labels.
            </summary>
        </member>
        <member name="P:LiteGraph.Edge.Tags">
            <summary>
            Tags.
            </summary>
        </member>
        <member name="P:LiteGraph.Edge.Data">
            <summary>
            Object data.
            </summary>
        </member>
        <member name="P:LiteGraph.Edge.Vectors">
            <summary>
            Vectors.
            </summary>
        </member>
        <member name="M:LiteGraph.Edge.#ctor">
            <summary>
            Instantiate.
            </summary>
        </member>
        <member name="T:LiteGraph.EdgeBetween">
            <summary>
            Existence check for multiple identifiers request.
            </summary>
        </member>
        <member name="P:LiteGraph.EdgeBetween.From">
            <summary>
            From GUID.
            </summary>
        </member>
        <member name="P:LiteGraph.EdgeBetween.To">
            <summary>
            To GUID.
            </summary>
        </member>
        <member name="M:LiteGraph.EdgeBetween.#ctor">
            <summary>
            Instantiate.
            </summary>
        </member>
        <member name="T:LiteGraph.EnumerationOrderEnum">
            <summary>
            Enumeration order. 
            </summary>
        </member>
        <member name="F:LiteGraph.EnumerationOrderEnum.CreatedAscending">
            <summary>
            Created ascending.
            </summary>
        </member>
        <member name="F:LiteGraph.EnumerationOrderEnum.CreatedDescending">
            <summary>
            Created descending.
            </summary>
        </member>
        <member name="F:LiteGraph.EnumerationOrderEnum.NameAscending">
            <summary>
            Name ascending.
            </summary>
        </member>
        <member name="F:LiteGraph.EnumerationOrderEnum.NameDescending">
            <summary>
            Name descending.
            </summary>
        </member>
        <member name="F:LiteGraph.EnumerationOrderEnum.GuidAscending">
            <summary>
            GUID ascending.
            </summary>
        </member>
        <member name="F:LiteGraph.EnumerationOrderEnum.GuidDescending">
            <summary>
            GUID descending.
            </summary>
        </member>
        <member name="F:LiteGraph.EnumerationOrderEnum.CostAscending">
            <summary>
            Cost ascending.
            </summary>
        </member>
        <member name="F:LiteGraph.EnumerationOrderEnum.CostDescending">
            <summary>
            Cost descending.
            </summary>
        </member>
        <member name="F:LiteGraph.EnumerationOrderEnum.MostConnected">
            <summary>
            Most connected.
            </summary>
        </member>
        <member name="F:LiteGraph.EnumerationOrderEnum.LeastConnected">
            <summary>
            Least connected.
            </summary>
        </member>
        <member name="T:LiteGraph.EnumerationQuery">
            <summary>
            Object used to request enumeration.
            </summary>
        </member>
        <member name="P:LiteGraph.EnumerationQuery.TenantGUID">
            <summary>
            Tenant GUID.
            </summary>
        </member>
        <member name="P:LiteGraph.EnumerationQuery.UserGUID">
            <summary>
            User GUID.
            </summary>
        </member>
        <member name="P:LiteGraph.EnumerationQuery.GraphGUID">
            <summary>
            Graph GUID.
            </summary>
        </member>
        <member name="P:LiteGraph.EnumerationQuery.Ordering">
            <summary>
            Order by.
            </summary>
        </member>
        <member name="P:LiteGraph.EnumerationQuery.IncludeData">
            <summary>
            Boolean indicating if an object's data property should be included.
            </summary>
        </member>
        <member name="P:LiteGraph.EnumerationQuery.IncludeSubordinates">
            <summary>
            Boolean indicating if an object's subordinate objects (i.e. labels, tags, vectors) should be included.
            </summary>
        </member>
        <member name="P:LiteGraph.EnumerationQuery.MaxResults">
            <summary>
            Maximum number of results to retrieve.
            </summary>
        </member>
        <member name="P:LiteGraph.EnumerationQuery.ContinuationToken">
            <summary>
            Continuation token.
            </summary>
        </member>
        <member name="P:LiteGraph.EnumerationQuery.Labels">
            <summary>
            Search labels.
            </summary>
        </member>
        <member name="P:LiteGraph.EnumerationQuery.Tags">
            <summary>
            Search tags.
            </summary>
        </member>
        <member name="P:LiteGraph.EnumerationQuery.Expr">
            <summary>
            Expression.
            </summary>
        </member>
        <member name="M:LiteGraph.EnumerationQuery.#ctor">
            <summary>
            Instantiate.
            </summary>
        </member>
        <member name="T:LiteGraph.EnumerationResult`1">
            <summary>
            Object returned as the result of an enumeration.
            </summary>
        </member>
        <member name="P:LiteGraph.EnumerationResult`1.Success">
            <summary>
            Indicates if the statistics operation was successful.
            </summary>
        </member>
        <member name="P:LiteGraph.EnumerationResult`1.Timestamp">
            <summary>
            Start and end timestamps.
            </summary>
        </member>
        <member name="P:LiteGraph.EnumerationResult`1.MaxResults">
            <summary>
            Maximum number of results to retrieve.
            </summary>
        </member>
        <member name="P:LiteGraph.EnumerationResult`1.ContinuationToken">
            <summary>
            Continuation token.
            </summary>
        </member>
        <member name="P:LiteGraph.EnumerationResult`1.EndOfResults">
            <summary>
            Boolean indicating end of results.
            </summary>
        </member>
        <member name="P:LiteGraph.EnumerationResult`1.TotalRecords">
            <summary>
            Total number of records.
            </summary>
        </member>
        <member name="P:LiteGraph.EnumerationResult`1.RecordsRemaining">
            <summary>
            Number of candidate records remaining in the enumeration.
            </summary>
        </member>
        <member name="P:LiteGraph.EnumerationResult`1.Objects">
            <summary>
            Objects.
            </summary>
        </member>
        <member name="M:LiteGraph.EnumerationResult`1.#ctor">
            <summary>
            Instantiates the object.
            </summary>
        </member>
        <member name="T:LiteGraph.ExistenceRequest">
            <summary>
            Existence check for multiple identifiers request.
            </summary>
        </member>
        <member name="P:LiteGraph.ExistenceRequest.Nodes">
            <summary>
            List of node GUIDs.
            </summary>
        </member>
        <member name="P:LiteGraph.ExistenceRequest.Edges">
            <summary>
            List of edge GUIDs.
            </summary>
        </member>
        <member name="P:LiteGraph.ExistenceRequest.EdgesBetween">
            <summary>
            List of edges between two nodes.
            </summary>
        </member>
        <member name="M:LiteGraph.ExistenceRequest.#ctor">
            <summary>
            Route request.
            </summary>
        </member>
        <member name="M:LiteGraph.ExistenceRequest.ContainsExistenceRequest">
            <summary>
            Verify that the object contains at least one existence request.
            </summary>
            <returns>True if present.</returns>
        </member>
        <member name="T:LiteGraph.ExistenceResult">
            <summary>
            Existence check for multiple identifiers result.
            </summary>
        </member>
        <member name="P:LiteGraph.ExistenceResult.ExistingNodes">
            <summary>
            List of existing node GUIDs.
            </summary>
        </member>
        <member name="P:LiteGraph.ExistenceResult.MissingNodes">
            <summary>
            List of missing node GUIDs.
            </summary>
        </member>
        <member name="P:LiteGraph.ExistenceResult.ExistingEdges">
            <summary>
            List of existing edge GUIDs.
            </summary>
        </member>
        <member name="P:LiteGraph.ExistenceResult.MissingEdges">
            <summary>
            List of missing edge GUIDs.
            </summary>
        </member>
        <member name="P:LiteGraph.ExistenceResult.ExistingEdgesBetween">
            <summary>
            List of existing edges between two nodes.
            </summary>
        </member>
        <member name="P:LiteGraph.ExistenceResult.MissingEdgesBetween">
            <summary>
            List of missing edges between two nodes.
            </summary>
        </member>
        <member name="M:LiteGraph.ExistenceResult.#ctor">
            <summary>
            Route request.
            </summary>
        </member>
        <member name="T:LiteGraph.Gexf.GexfAttribute">
            <summary>
            Attribute.
            </summary>
        </member>
        <member name="P:LiteGraph.Gexf.GexfAttribute.Id">
            <summary>
            Attribute ID.
            </summary>
        </member>
        <member name="P:LiteGraph.Gexf.GexfAttribute.Title">
            <summary>
            Attribute title.
            </summary>
        </member>
        <member name="P:LiteGraph.Gexf.GexfAttribute.Type">
            <summary>
            Attribute type.
            </summary>
        </member>
        <member name="P:LiteGraph.Gexf.GexfAttribute.Default">
            <summary>
            Attribute default value.
            </summary>
        </member>
        <member name="M:LiteGraph.Gexf.GexfAttribute.#ctor(System.String,System.String,System.String)">
            <summary>
            Instantiate the object.
            </summary>
            <param name="id">Attribute ID.</param>
            <param name="title">Attribute title.</param>
            <param name="type">Attribute type.</param>
        </member>
        <member name="M:LiteGraph.Gexf.GexfAttribute.#ctor">
            <summary>
            Instantiate the object.
            </summary>
        </member>
        <member name="T:LiteGraph.Gexf.GexfAttributes">
            <summary>
            Attributes.
            </summary>
        </member>
        <member name="P:LiteGraph.Gexf.GexfAttributes.AttributeList">
            <summary>
            Attributes.
            </summary>
        </member>
        <member name="P:LiteGraph.Gexf.GexfAttributes.Class">
            <summary>
            Attribute class, i.e. 'node' or 'edge'.
            </summary>
        </member>
        <member name="M:LiteGraph.Gexf.GexfAttributes.#ctor">
            <summary>
            Instantiate the object.
            </summary>
        </member>
        <member name="T:LiteGraph.Gexf.GexfAttributeValue">
            <summary>
            Attribute value.
            </summary>
        </member>
        <member name="P:LiteGraph.Gexf.GexfAttributeValue.For">
            <summary>
            ID of the object to which the attribute is assigned.
            </summary>
        </member>
        <member name="P:LiteGraph.Gexf.GexfAttributeValue.Value">
            <summary>
            Value of the attribute.
            </summary>
        </member>
        <member name="M:LiteGraph.Gexf.GexfAttributeValue.#ctor(System.String,System.String)">
            <summary>
            Instantiate the object.
            </summary>
            <param name="forGuid">ID of the object to which the attribute is assigned.</param>
            <param name="value">Value of the attribute.</param>
        </member>
        <member name="M:LiteGraph.Gexf.GexfAttributeValue.#ctor">
            <summary>
            Instantiate the object.
            </summary>
        </member>
        <member name="T:LiteGraph.Gexf.GexfAttributeValues">
            <summary>
            Attribute values.
            </summary>
        </member>
        <member name="P:LiteGraph.Gexf.GexfAttributeValues.Values">
            <summary>
            Attribute values.
            </summary>
        </member>
        <member name="M:LiteGraph.Gexf.GexfAttributeValues.#ctor">
            <summary>
            Instantiate the object.
            </summary>
        </member>
        <member name="T:LiteGraph.Gexf.GexfDocument">
            <summary>
            Graph Exchange XML Format document.
            </summary>
        </member>
        <member name="P:LiteGraph.Gexf.GexfDocument.Meta">
            <summary>
            Document metadata.
            </summary>
        </member>
        <member name="P:LiteGraph.Gexf.GexfDocument.Graph">
            <summary>
            Graph.  
            </summary>
        </member>
        <member name="P:LiteGraph.Gexf.GexfDocument.Xmlns">
            <summary>
            XML namespace.
            </summary>
        </member>
        <member name="P:LiteGraph.Gexf.GexfDocument.SchemaLocation">
            <summary>
            Schema location.
            </summary>
        </member>
        <member name="P:LiteGraph.Gexf.GexfDocument.Version">
            <summary>
            Version.
            </summary>
        </member>
        <member name="M:LiteGraph.Gexf.GexfDocument.#ctor">
            <summary>
            Instantiate the object.
            </summary>
        </member>
        <member name="T:LiteGraph.Gexf.GexfEdge">
            <summary>
            Edge.
            </summary>
        </member>
        <member name="P:LiteGraph.Gexf.GexfEdge.ValueList">
            <summary>
            Attribute values.
            </summary>
        </member>
        <member name="P:LiteGraph.Gexf.GexfEdge.Id">
            <summary>
            ID.
            </summary>
        </member>
        <member name="P:LiteGraph.Gexf.GexfEdge.Source">
            <summary>
            Source.
            </summary>
        </member>
        <member name="P:LiteGraph.Gexf.GexfEdge.Target">
            <summary>
            Target.
            </summary>
        </member>
        <member name="M:LiteGraph.Gexf.GexfEdge.#ctor(System.Guid,System.Guid,System.Guid)">
            <summary>
            Instantiate the object.
            </summary>
            <param name="id">ID.</param>
            <param name="source">Source.</param>
            <param name="target">Target.</param>
        </member>
        <member name="M:LiteGraph.Gexf.GexfEdge.#ctor">
            <summary>
            Instantiate the object.
            </summary>
        </member>
        <member name="T:LiteGraph.Gexf.GexfEdges">
            <summary>
            Edges.
            </summary>
        </member>
        <member name="P:LiteGraph.Gexf.GexfEdges.Edges">
            <summary>
            List of edges.
            </summary>
        </member>
        <member name="M:LiteGraph.Gexf.GexfEdges.#ctor">
            <summary>
            Instantiate the object.
            </summary>
        </member>
        <member name="T:LiteGraph.Gexf.GexfGraph">
            <summary>
            Graph.
            </summary>
        </member>
        <member name="P:LiteGraph.Gexf.GexfGraph.Attributes">
            <summary>
            Attributes.
            </summary>
        </member>
        <member name="P:LiteGraph.Gexf.GexfGraph.NodeList">
            <summary>
            Nodes.
            </summary>
        </member>
        <member name="P:LiteGraph.Gexf.GexfGraph.EdgeList">
            <summary>
            Edges.
            </summary>
        </member>
        <member name="P:LiteGraph.Gexf.GexfGraph.DefaultEdgeType">
            <summary>
            Default edge type, i.e. 'directed'.
            </summary>
        </member>
        <member name="M:LiteGraph.Gexf.GexfGraph.#ctor">
            <summary>
            Instantiate the object.
            </summary>
        </member>
        <member name="T:LiteGraph.Gexf.GexfMetadata">
            <summary>
            Document metadata.
            </summary>
        </member>
        <member name="P:LiteGraph.Gexf.GexfMetadata.Creator">
            <summary>
            Document creator.
            </summary>
        </member>
        <member name="P:LiteGraph.Gexf.GexfMetadata.Description">
            <summary>
            Document description.
            </summary>
        </member>
        <member name="P:LiteGraph.Gexf.GexfMetadata.LastModifiedDate">
            <summary>
            Last modified date.
            </summary>
        </member>
        <member name="M:LiteGraph.Gexf.GexfMetadata.#ctor">
            <summary>
            Instantiate the object.
            </summary>
        </member>
        <member name="T:LiteGraph.Gexf.GexfNode">
            <summary>
            Node.
            </summary>
        </member>
        <member name="P:LiteGraph.Gexf.GexfNode.ValueList">
            <summary>
            Attribute values.
            </summary>
        </member>
        <member name="P:LiteGraph.Gexf.GexfNode.Id">
            <summary>
            ID.
            </summary>
        </member>
        <member name="P:LiteGraph.Gexf.GexfNode.Label">
            <summary>
            Label.
            </summary>
        </member>
        <member name="M:LiteGraph.Gexf.GexfNode.#ctor(System.Guid,System.String)">
            <summary>
            Instantiate the object.
            </summary>
            <param name="id">ID.</param>
            <param name="label">Label.</param>
        </member>
        <member name="M:LiteGraph.Gexf.GexfNode.#ctor">
            <summary>
            Instantiate the object.
            </summary>
        </member>
        <member name="T:LiteGraph.Gexf.GexfNodes">
            <summary>
            Nodes.
            </summary>
        </member>
        <member name="P:LiteGraph.Gexf.GexfNodes.Nodes">
            <summary>
            List of nodes.
            </summary>
        </member>
        <member name="M:LiteGraph.Gexf.GexfNodes.#ctor">
            <summary>
            Instantiate the object.
            </summary>
        </member>
        <member name="T:LiteGraph.Gexf.GexfWriter">
            <summary>
            GEXF file writer.
            </summary>
        </member>
        <member name="M:LiteGraph.Gexf.GexfWriter.#ctor(LiteGraph.Serialization.Serializer)">
            <summary>
            Instantiate.
            </summary>
            <param name="serializer">Serializer.</param>
        </member>
        <member name="M:LiteGraph.Gexf.GexfWriter.ExportToFile(LiteGraph.LiteGraphClient,System.Guid,System.Guid,System.String,System.Boolean)">
            <summary>
            Write a GEXF file.
            </summary>
            <param name="client">LiteGraphClient.</param>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="filename">Output filename.</param>
            <param name="includeData">True to include node and edge data.</param>
        </member>
        <member name="M:LiteGraph.Gexf.GexfWriter.RenderAsGexf(LiteGraph.LiteGraphClient,System.Guid,System.Guid,System.Boolean)">
            <summary>
            Render a graph as a GEXF string.
            </summary>
            <param name="client">LiteGraphClient.</param>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="includeData">True to include node and edge data.</param>
            <returns>GEXF document.</returns>
        </member>
        <member name="T:LiteGraph.Graph">
            <summary>
            Graph.
            </summary>
        </member>
        <member name="P:LiteGraph.Graph.TenantGUID">
            <summary>
            Tenant GUID.
            </summary>
        </member>
        <member name="P:LiteGraph.Graph.GUID">
            <summary>
            Globally-unique identifier.
            </summary>
        </member>
        <member name="P:LiteGraph.Graph.Name">
            <summary>
            Name.
            </summary>
        </member>
        <member name="P:LiteGraph.Graph.CreatedUtc">
            <summary>
            Timestamp from creation, in UTC.
            </summary>
        </member>
        <member name="P:LiteGraph.Graph.LastUpdateUtc">
            <summary>
            Timestamp from last update, in UTC.
            </summary>
        </member>
        <member name="P:LiteGraph.Graph.Labels">
            <summary>
            Labels.
            </summary>
        </member>
        <member name="P:LiteGraph.Graph.Tags">
            <summary>
            Tags.
            </summary>
        </member>
        <member name="P:LiteGraph.Graph.Data">
            <summary>
            Object data.
            </summary>
        </member>
        <member name="P:LiteGraph.Graph.Vectors">
            <summary>
            Vectors.
            </summary>
        </member>
        <member name="M:LiteGraph.Graph.#ctor">
            <summary>
            Instantiate the object.
            </summary>
        </member>
        <member name="T:LiteGraph.GraphRepositories.GraphRepositoryBase">
            <summary>
            Graph repository base class.
            The graph repository base class is only responsible for primitives.
            Validation and cross-cutting functions should be performed in LiteGraphClient rather than in the graph repository base.
            </summary>
        </member>
        <member name="P:LiteGraph.GraphRepositories.GraphRepositoryBase.Logging">
            <summary>
            Logging.
            </summary>
        </member>
        <member name="P:LiteGraph.GraphRepositories.GraphRepositoryBase.Serializer">
            <summary>
            Serializer.
            </summary>
        </member>
        <member name="P:LiteGraph.GraphRepositories.GraphRepositoryBase.Admin">
            <summary>
            Admin methods.
            </summary>
        </member>
        <member name="P:LiteGraph.GraphRepositories.GraphRepositoryBase.Tenant">
            <summary>
            Tenant methods.
            </summary>
        </member>
        <member name="P:LiteGraph.GraphRepositories.GraphRepositoryBase.User">
            <summary>
            User methods.
            </summary>
        </member>
        <member name="P:LiteGraph.GraphRepositories.GraphRepositoryBase.Credential">
            <summary>
            Credential methods.
            </summary>
        </member>
        <member name="P:LiteGraph.GraphRepositories.GraphRepositoryBase.Label">
            <summary>
            Label methods.
            </summary>
        </member>
        <member name="P:LiteGraph.GraphRepositories.GraphRepositoryBase.Tag">
            <summary>
            Tag methods.
            </summary>
        </member>
        <member name="P:LiteGraph.GraphRepositories.GraphRepositoryBase.Vector">
            <summary>
            Vector methods.
            </summary>
        </member>
        <member name="P:LiteGraph.GraphRepositories.GraphRepositoryBase.Graph">
            <summary>
            Graph methods.
            </summary>
        </member>
        <member name="P:LiteGraph.GraphRepositories.GraphRepositoryBase.Node">
            <summary>
            Node methods.
            </summary>
        </member>
        <member name="P:LiteGraph.GraphRepositories.GraphRepositoryBase.Edge">
            <summary>
            Edge methods.
            </summary>
        </member>
        <member name="P:LiteGraph.GraphRepositories.GraphRepositoryBase.Batch">
            <summary>
            Batch methods.
            </summary>
        </member>
        <member name="M:LiteGraph.GraphRepositories.GraphRepositoryBase.InitializeRepository">
            <summary>
            Initialize the repository.
            </summary>
        </member>
        <member name="M:LiteGraph.GraphRepositories.GraphRepositoryBase.Flush">
            <summary>
            Flush database contents to disk.  Only required if using an in-memory instance of a LiteGraph database.
            </summary>
        </member>
        <member name="T:LiteGraph.GraphRepositories.Interfaces.IAdminMethods">
            <summary>
            Interface for admin methods.
            Graph repository base methods are responsible only for primitives, not input validation or cross-cutting.
            </summary>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Interfaces.IAdminMethods.Backup(System.String)">
            <summary>
            Batch existence request.
            </summary>
            <param name="outputFilename">Output filename.</param>
        </member>
        <member name="T:LiteGraph.GraphRepositories.Interfaces.IBatchMethods">
            <summary>
            Interface for batch methods.
            Graph repository base methods are responsible only for primitives, not input validation or cross-cutting.
            </summary>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Interfaces.IBatchMethods.Existence(System.Guid,System.Guid,LiteGraph.ExistenceRequest)">
            <summary>
            Batch existence request.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="req">Existence request.</param>
            <returns>Existence result.</returns>
        </member>
        <member name="T:LiteGraph.GraphRepositories.Interfaces.ICredentialMethods">
            <summary>
            Interface for credential methods.
            Graph repository base methods are responsible only for primitives, not input validation or cross-cutting.
            </summary>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Interfaces.ICredentialMethods.Create(LiteGraph.Credential)">
            <summary>
            Create a credential.
            </summary>
            <param name="credential">Credential.</param>
            <returns>Credential.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Interfaces.ICredentialMethods.ReadAllInTenant(System.Guid,LiteGraph.EnumerationOrderEnum,System.Int32)">
            <summary>
            Read all credentials in tenant.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="order">Enumeration order.</param>
            <param name="skip">Number of records to skip.</param>
            <returns>Credentials.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Interfaces.ICredentialMethods.ReadMany(System.Nullable{System.Guid},System.Nullable{System.Guid},System.String,LiteGraph.EnumerationOrderEnum,System.Int32)">
            <summary>
            Read credentials.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="userGuid">User GUID.</param>
            <param name="bearerToken">Bearer token.</param>
            <param name="order">Enumeration order.</param>
            <param name="skip">Number of records to skip.</param>
            <returns>Credentials.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Interfaces.ICredentialMethods.ReadByGuid(System.Guid,System.Guid)">
            <summary>
            Read a credential by GUID.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="guid">GUID.</param>
            <returns>Credential.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Interfaces.ICredentialMethods.ReadByBearerToken(System.String)">
            <summary>
            Read a credential by bearer token.
            </summary>
            <param name="bearerToken">Bearer token.</param>
            <returns>Credential.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Interfaces.ICredentialMethods.Enumerate(LiteGraph.EnumerationQuery)">
            <summary>
            Enumerate objects.
            </summary>
            <param name="query">Enumeration query.</param>
            <returns>Enumeration result containing a page of objects.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Interfaces.ICredentialMethods.GetRecordCount(System.Nullable{System.Guid},System.Nullable{System.Guid},LiteGraph.EnumerationOrderEnum,System.Nullable{System.Guid})">
            <summary>
            Get the record count.  Optionally supply a marker object GUID to indicate that only records from that marker record should be counted.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="userGuid">User GUID.</param>
            <param name="order">Enumeration order.</param>
            <param name="markerGuid">Marker GUID.</param>
            <returns>Number of records.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Interfaces.ICredentialMethods.Update(LiteGraph.Credential)">
            <summary>
            Update a credential.
            </summary>
            <param name="cred">Credential.</param>
            <returns>Credential.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Interfaces.ICredentialMethods.DeleteAllInTenant(System.Guid)">
            <summary>
            Delete credentials associated with a tenant.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Interfaces.ICredentialMethods.DeleteByGuid(System.Guid,System.Guid)">
            <summary>
            Delete a credential.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="guid">GUID.</param>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Interfaces.ICredentialMethods.DeleteByUser(System.Guid,System.Guid)">
            <summary>
            Delete credentials associated with a user.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="userGuid">User GUID.</param>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Interfaces.ICredentialMethods.ExistsByGuid(System.Guid,System.Guid)">
            <summary>
            Check if a credential exists by GUID.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="guid">GUID.</param>
            <returns>True if exists.</returns>
        </member>
        <member name="T:LiteGraph.GraphRepositories.Interfaces.IEdgeMethods">
            <summary>
            Interface for edge methods.
            Graph repository base methods are responsible only for primitives, not input validation or cross-cutting.
            </summary>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Interfaces.IEdgeMethods.Create(LiteGraph.Edge)">
            <summary>
            Create an edge between two nodes.
            </summary>
            <param name="edge">Edge.</param>
            <returns>Edge.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Interfaces.IEdgeMethods.CreateMany(System.Guid,System.Guid,System.Collections.Generic.List{LiteGraph.Edge})">
            <summary>
            Create multiple edges.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="edges">Edges.</param>
            <returns>Edges.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Interfaces.IEdgeMethods.ReadAllInTenant(System.Guid,LiteGraph.EnumerationOrderEnum,System.Int32)">
            <summary>
            Read all edges in a given tenant.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="order">Enumeration order.</param>
            <param name="skip">The number of records to skip.</param>
            <returns>Edges.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Interfaces.IEdgeMethods.ReadAllInGraph(System.Guid,System.Guid,LiteGraph.EnumerationOrderEnum,System.Int32)">
            <summary>
            Read all edges in a given graph.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="order">Enumeration order.</param>
            <param name="skip">The number of records to skip.</param>
            <returns>Edges.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Interfaces.IEdgeMethods.ReadMany(System.Guid,System.Guid,System.Collections.Generic.List{System.String},System.Collections.Specialized.NameValueCollection,ExpressionTree.Expr,LiteGraph.EnumerationOrderEnum,System.Int32)">
            <summary>
            Read edges.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="labels">Labels.</param>
            <param name="tags">Tags.</param>
            <param name="edgeFilter">
            Edge filter expression for Data JSON body.
            Expression left terms must follow the form of Sqlite JSON paths.
            For example, to retrieve the 'Name' property, use '$.Name', OperatorEnum.Equals, '[name here]'.</param>
            <param name="order">Enumeration order.</param>
            <param name="skip">The number of records to skip.</param>
            <returns>Edges.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Interfaces.IEdgeMethods.ReadFirst(System.Guid,System.Guid,System.Collections.Generic.List{System.String},System.Collections.Specialized.NameValueCollection,ExpressionTree.Expr,LiteGraph.EnumerationOrderEnum)">
            <summary>
            Read first.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="labels">Labels.</param>
            <param name="tags">Tags.</param>
            <param name="edgeFilter">
            Edge filter expression for Data JSON body.
            Expression left terms must follow the form of Sqlite JSON paths.
            For example, to retrieve the 'Name' property, use '$.Name', OperatorEnum.Equals, '[name here]'.</param>
            <param name="order">Enumeration order.</param>
            <returns>Edge.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Interfaces.IEdgeMethods.ReadByGuid(System.Guid,System.Guid,System.Guid)">
            <summary>
            Read edge.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="edgeGuid">Edge GUID.</param>
            <returns>Edge.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Interfaces.IEdgeMethods.ReadNodeEdges(System.Guid,System.Guid,System.Guid,System.Collections.Generic.List{System.String},System.Collections.Specialized.NameValueCollection,ExpressionTree.Expr,LiteGraph.EnumerationOrderEnum,System.Int32)">
            <summary>
            Get edges connected to or initiated from a given node.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="nodeGuid">Node GUID.</param>
            <param name="labels">Labels.</param>
            <param name="tags">Tags upon which to filter edges.</param>
            <param name="edgeFilter">
            Edge filter expression for Data JSON body.
            Expression left terms must follow the form of Sqlite JSON paths.
            For example, to retrieve the 'Name' property, use '$.Name', OperatorEnum.Equals, '[name here]'.</param>
            <param name="order">Enumeration order.</param>
            <param name="skip">The number of records to skip.</param>
            <returns>Edges.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Interfaces.IEdgeMethods.ReadEdgesFromNode(System.Guid,System.Guid,System.Guid,System.Collections.Generic.List{System.String},System.Collections.Specialized.NameValueCollection,ExpressionTree.Expr,LiteGraph.EnumerationOrderEnum,System.Int32)">
            <summary>
            Get edges from a given node.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="nodeGuid">Node GUID.</param>
            <param name="labels">Labels.</param>
            <param name="tags">Tags upon which to filter edges.</param>
            <param name="edgeFilter">
            Edge filter expression for Data JSON body.
            Expression left terms must follow the form of Sqlite JSON paths.
            For example, to retrieve the 'Name' property, use '$.Name', OperatorEnum.Equals, '[name here]'.</param>
            <param name="order">Enumeration order.</param>
            <param name="skip">The number of records to skip.</param>
            <returns>Edges.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Interfaces.IEdgeMethods.ReadEdgesToNode(System.Guid,System.Guid,System.Guid,System.Collections.Generic.List{System.String},System.Collections.Specialized.NameValueCollection,ExpressionTree.Expr,LiteGraph.EnumerationOrderEnum,System.Int32)">
            <summary>
            Get edges to a given node.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="nodeGuid">Node GUID.</param>
            <param name="labels">Labels.</param>
            <param name="tags">Tags upon which to filter edges.</param>
            <param name="edgeFilter">
            Edge filter expression for Data JSON body.
            Expression left terms must follow the form of Sqlite JSON paths.
            For example, to retrieve the 'Name' property, use '$.Name', OperatorEnum.Equals, '[name here]'.</param>
            <param name="order">Enumeration order.</param>
            <param name="skip">The number of records to skip.</param>
            <returns>Edges.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Interfaces.IEdgeMethods.ReadEdgesBetweenNodes(System.Guid,System.Guid,System.Guid,System.Guid,System.Collections.Generic.List{System.String},System.Collections.Specialized.NameValueCollection,ExpressionTree.Expr,LiteGraph.EnumerationOrderEnum,System.Int32)">
            <summary>
            Get edges between two neighboring nodes.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="fromNodeGuid">From node GUID.</param>
            <param name="toNodeGuid">To node GUID.</param>
            <param name="labels">Labels.</param>
            <param name="tags">Tags upon which to filter edges.</param>
            <param name="edgeFilter">
            Edge filter expression for Data JSON body.
            Expression left terms must follow the form of Sqlite JSON paths.
            For example, to retrieve the 'Name' property, use '$.Name', OperatorEnum.Equals, '[name here]'.</param>
            <param name="order">Enumeration order.</param>
            <param name="skip">The number of records to skip.</param>
            <returns>Edges.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Interfaces.IEdgeMethods.Enumerate(LiteGraph.EnumerationQuery)">
            <summary>
            Enumerate objects.
            </summary>
            <param name="query">Enumeration query.</param>
            <returns>Enumeration result containing a page of objects.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Interfaces.IEdgeMethods.GetRecordCount(System.Nullable{System.Guid},System.Nullable{System.Guid},System.Collections.Generic.List{System.String},System.Collections.Specialized.NameValueCollection,ExpressionTree.Expr,LiteGraph.EnumerationOrderEnum,System.Nullable{System.Guid})">
            <summary>
            Get the record count.  Optionally supply a marker object GUID to indicate that only records from that marker record should be counted.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="labels">Labels.</param>
            <param name="tags">Tags upon which to filter.</param>
            <param name="filter">
            Edge filter expression for Data JSON body.
            Expression left terms must follow the form of Sqlite JSON paths.
            For example, to retrieve the 'Name' property, use '$.Name', OperatorEnum.Equals, '[name here]'.</param>
            <param name="order">Enumeration order.</param>
            <param name="markerGuid">Marker GUID.</param>
            <returns>Number of records.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Interfaces.IEdgeMethods.Update(LiteGraph.Edge)">
            <summary>
            Update edge.
            </summary>
            <param name="edge">Edge.</param>
            <returns>Edge.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Interfaces.IEdgeMethods.DeleteByGuid(System.Guid,System.Guid,System.Guid)">
            <summary>
            Delete edge.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="edgeGuid">Edge GUID.</param>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Interfaces.IEdgeMethods.DeleteAllInTenant(System.Guid)">
            <summary>
            Delete all edges from a tenant.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Interfaces.IEdgeMethods.DeleteAllInGraph(System.Guid,System.Guid)">
            <summary>
            Delete all edges from a graph.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Interfaces.IEdgeMethods.DeleteNodeEdges(System.Guid,System.Guid,System.Guid)">
            <summary>
            Delete all edges associated with a given node.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="nodeGuid">Node GUID.</param>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Interfaces.IEdgeMethods.DeleteNodeEdges(System.Guid,System.Guid,System.Collections.Generic.List{System.Guid})">
            <summary>
            Delete all edges associated with a set of given nodes.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="nodeGuids">Node GUIDs.</param>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Interfaces.IEdgeMethods.DeleteMany(System.Guid,System.Guid,System.Collections.Generic.List{System.Guid})">
            <summary>
            Delete multiple edges from a graph.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="edgeGuids">Edge GUIDs.</param>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Interfaces.IEdgeMethods.ExistsByGuid(System.Guid,System.Guid,System.Guid)">
            <summary>
            Check if an edge exists by GUID.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="edgeGuid">Edge GUID.</param>
            <returns>True if exists.</returns>
        </member>
        <member name="T:LiteGraph.GraphRepositories.Interfaces.IGraphMethods">
            <summary>
            Interface for graph methods.
            Graph repository base methods are responsible only for primitives, not input validation or cross-cutting.
            </summary>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Interfaces.IGraphMethods.Create(LiteGraph.Graph)">
            <summary>
            Create a graph.
            </summary>
            <param name="graph">Graph.</param>
            <returns>Graph.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Interfaces.IGraphMethods.ReadAllInTenant(System.Guid,LiteGraph.EnumerationOrderEnum,System.Int32)">
            <summary>
            Read all graphs in a given tenant.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="order">Enumeration order.</param>
            <param name="skip">The number of records to skip.</param>
            <returns>Graphs.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Interfaces.IGraphMethods.ReadMany(System.Guid,System.Collections.Generic.List{System.String},System.Collections.Specialized.NameValueCollection,ExpressionTree.Expr,LiteGraph.EnumerationOrderEnum,System.Int32)">
            <summary>
            Read graphs.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="labels">Labels.</param>
            <param name="tags">Tags on which to match.</param>
            <param name="graphFilter">
            Graph filter expression for Data JSON body.
            Expression left terms must follow the form of Sqlite JSON paths.
            For example, to retrieve the 'Name' property, use '$.Name', OperatorEnum.Equals, '[name here]'.</param>
            <param name="order">Enumeration order.</param>
            <param name="skip">The number of records to skip.</param>
            <returns>Graphs.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Interfaces.IGraphMethods.ReadFirst(System.Guid,System.Collections.Generic.List{System.String},System.Collections.Specialized.NameValueCollection,ExpressionTree.Expr,LiteGraph.EnumerationOrderEnum)">
            <summary>
            Read first.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="labels">Labels.</param>
            <param name="tags">Tags on which to match.</param>
            <param name="graphFilter">
            Graph filter expression for Data JSON body.
            Expression left terms must follow the form of Sqlite JSON paths.
            For example, to retrieve the 'Name' property, use '$.Name', OperatorEnum.Equals, '[name here]'.</param>
            <param name="order">Enumeration order.</param>
            <returns>Graph.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Interfaces.IGraphMethods.ReadByGuid(System.Guid,System.Guid)">
            <summary>
            Read a graph by GUID.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="guid">GUID.</param>
            <returns>Graph.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Interfaces.IGraphMethods.Enumerate(LiteGraph.EnumerationQuery)">
            <summary>
            Enumerate objects.
            </summary>
            <param name="query">Enumeration query.</param>
            <returns>Enumeration result containing a page of objects.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Interfaces.IGraphMethods.GetRecordCount(System.Nullable{System.Guid},System.Collections.Generic.List{System.String},System.Collections.Specialized.NameValueCollection,ExpressionTree.Expr,LiteGraph.EnumerationOrderEnum,System.Nullable{System.Guid})">
            <summary>
            Get the record count.  Optionally supply a marker object GUID to indicate that only records from that marker record should be counted.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="labels">Labels.</param>
            <param name="tags">Tags upon which to filter.</param>
            <param name="filter">
            Edge filter expression for Data JSON body.
            Expression left terms must follow the form of Sqlite JSON paths.
            For example, to retrieve the 'Name' property, use '$.Name', OperatorEnum.Equals, '[name here]'.</param>
            <param name="order">Enumeration order.</param>
            <param name="markerGuid">Marker GUID.</param>
            <returns>Number of records.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Interfaces.IGraphMethods.Update(LiteGraph.Graph)">
            <summary>
            Update a graph.
            </summary>
            <param name="graph">Graph.</param>
            <returns>Graph.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Interfaces.IGraphMethods.DeleteByGuid(System.Guid,System.Guid)">
            <summary>
            Delete a graph.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="guid">GUID.</param>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Interfaces.IGraphMethods.DeleteAllInTenant(System.Guid)">
            <summary>
            Delete graphs associated with a tenant.  Deletion is forceful.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Interfaces.IGraphMethods.ExistsByGuid(System.Guid,System.Guid)">
            <summary>
            Check if a graph exists by GUID.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="guid">GUID.</param>
            <returns>True if exists.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Interfaces.IGraphMethods.GetStatistics(System.Guid,System.Guid)">
            <summary>
            Retrieve graph statistics.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="guid">Graph GUID.</param>
            <returns>Graph statistics.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Interfaces.IGraphMethods.GetStatistics(System.Guid)">
            <summary>
            Retrieve graph statistics.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <returns>Dictionary of graph statistics.</returns>
        </member>
        <member name="T:LiteGraph.GraphRepositories.Interfaces.ILabelMethods">
            <summary>
            Interface for label methods.
            Graph repository base methods are responsible only for primitives, not input validation or cross-cutting.
            </summary>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Interfaces.ILabelMethods.Create(LiteGraph.LabelMetadata)">
            <summary>
            Create a label.
            </summary>
            <param name="label">Label.</param>
            <returns>Label.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Interfaces.ILabelMethods.CreateMany(System.Guid,System.Collections.Generic.List{LiteGraph.LabelMetadata})">
            <summary>
            Create multiple labels.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="labels">Labels.</param>
            <returns>Labels.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Interfaces.ILabelMethods.ReadAllInTenant(System.Guid,LiteGraph.EnumerationOrderEnum,System.Int32)">
            <summary>
            Read all labels in a given tenant.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="order">Enumeration order.</param>
            <param name="skip">The number of records to skip.</param>
            <returns>Labels.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Interfaces.ILabelMethods.ReadAllInGraph(System.Guid,System.Guid,LiteGraph.EnumerationOrderEnum,System.Int32)">
            <summary>
            Read all labels in a given graph.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="order">Enumeration order.</param>
            <param name="skip">The number of records to skip.</param>
            <returns>Labels.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Interfaces.ILabelMethods.ReadMany(System.Guid,System.Nullable{System.Guid},System.Nullable{System.Guid},System.Nullable{System.Guid},System.String,LiteGraph.EnumerationOrderEnum,System.Int32)">
            <summary>
            Read labels.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="nodeGuid">Node GUID.</param>
            <param name="edgeGuid">Edge GUID.</param>
            <param name="label">Label.</param>
            <param name="order">Enumeration order.</param>
            <param name="skip">Number of records to skip.</param>
            <returns>Labels.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Interfaces.ILabelMethods.ReadManyGraph(System.Guid,System.Guid,LiteGraph.EnumerationOrderEnum,System.Int32)">
            <summary>
            Read graph labels.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="order">Enumeration order.</param>
            <param name="skip">Number of records to skip.</param>
            <returns>Labels.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Interfaces.ILabelMethods.ReadManyNode(System.Guid,System.Guid,System.Guid,LiteGraph.EnumerationOrderEnum,System.Int32)">
            <summary>
            Read node labels.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="nodeGuid">Node GUID.</param>
            <param name="order">Enumeration order.</param>
            <param name="skip">Number of records to skip.</param>
            <returns>Labels.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Interfaces.ILabelMethods.ReadManyEdge(System.Guid,System.Guid,System.Guid,LiteGraph.EnumerationOrderEnum,System.Int32)">
            <summary>
            Read edge labels.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="edgeGuid">Edge GUID.</param>
            <param name="order">Enumeration order.</param>
            <param name="skip">Number of records to skip.</param>
            <returns>Labels.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Interfaces.ILabelMethods.ReadByGuid(System.Guid,System.Guid)">
            <summary>
            Read a label by GUID.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="guid">GUID.</param>
            <returns>Label.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Interfaces.ILabelMethods.Enumerate(LiteGraph.EnumerationQuery)">
            <summary>
            Enumerate objects.
            </summary>
            <param name="query">Enumeration query.</param>
            <returns>Enumeration result containing a page of objects.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Interfaces.ILabelMethods.GetRecordCount(System.Nullable{System.Guid},System.Nullable{System.Guid},LiteGraph.EnumerationOrderEnum,System.Nullable{System.Guid})">
            <summary>
            Get the record count.  Optionally supply a marker object GUID to indicate that only records from that marker record should be counted.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="order">Enumeration order.</param>
            <param name="markerGuid">Marker GUID.</param>
            <returns>Number of records.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Interfaces.ILabelMethods.Update(LiteGraph.LabelMetadata)">
            <summary>
            Update a label.
            </summary>
            <param name="label">Label.</param>
            <returns>Label.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Interfaces.ILabelMethods.DeleteByGuid(System.Guid,System.Guid)">
            <summary>
            Delete a label.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="guid">GUID.</param>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Interfaces.ILabelMethods.DeleteMany(System.Guid,System.Nullable{System.Guid},System.Collections.Generic.List{System.Guid},System.Collections.Generic.List{System.Guid})">
            <summary>
            Delete labels.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="nodeGuids">Node GUIDs.</param>
            <param name="edgeGuids">Edge GUIDs.</param>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Interfaces.ILabelMethods.DeleteMany(System.Guid,System.Collections.Generic.List{System.Guid})">
            <summary>
            Delete labels.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="guids">GUIDs.</param>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Interfaces.ILabelMethods.DeleteAllInTenant(System.Guid)">
            <summary>
            Delete all labels associated with a tenant.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Interfaces.ILabelMethods.DeleteAllInGraph(System.Guid,System.Guid)">
            <summary>
            Delete all labels associated with a graph.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Interfaces.ILabelMethods.DeleteGraphLabels(System.Guid,System.Guid)">
            <summary>
            Delete labels for the graph object itself, leaving subordinate node and edge labels in place.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Interfaces.ILabelMethods.DeleteNodeLabels(System.Guid,System.Guid,System.Guid)">
            <summary>
            Delete node labels.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="nodeGuid">Node GUID.</param>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Interfaces.ILabelMethods.DeleteEdgeLabels(System.Guid,System.Guid,System.Guid)">
            <summary>
            Delete edge labels.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="edgeGuid">Edge GUID.</param>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Interfaces.ILabelMethods.ExistsByGuid(System.Guid,System.Guid)">
            <summary>
            Check if a label exists by GUID.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="guid">GUID.</param>
            <returns>True if exists.</returns>
        </member>
        <member name="T:LiteGraph.GraphRepositories.Interfaces.INodeMethods">
            <summary>
            Interface for node methods.
            Graph repository base methods are responsible only for primitives, not input validation or cross-cutting.
            </summary>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Interfaces.INodeMethods.Create(LiteGraph.Node)">
            <summary>
            Create a node.
            </summary>
            <param name="node">Node.</param>
            <returns>Node.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Interfaces.INodeMethods.CreateMany(System.Guid,System.Guid,System.Collections.Generic.List{LiteGraph.Node})">
            <summary>
            Create multiple nodes.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="nodes">Nodes.</param>
            <returns>Nodes.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Interfaces.INodeMethods.ReadAllInTenant(System.Guid,LiteGraph.EnumerationOrderEnum,System.Int32)">
            <summary>
            Read all nodes in a given tenant.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="order">Enumeration order.</param>
            <param name="skip">The number of records to skip.</param>
            <returns>Nodes.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Interfaces.INodeMethods.ReadAllInGraph(System.Guid,System.Guid,LiteGraph.EnumerationOrderEnum,System.Int32)">
            <summary>
            Read all nodes in a given graph.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="order">Enumeration order.</param>
            <param name="skip">The number of records to skip.</param>
            <returns>Nodes.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Interfaces.INodeMethods.ReadMany(System.Guid,System.Guid,System.Collections.Generic.List{System.String},System.Collections.Specialized.NameValueCollection,ExpressionTree.Expr,LiteGraph.EnumerationOrderEnum,System.Int32)">
            <summary>
            Read nodes.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="labels">Labels.</param>
            <param name="tags">Tags.</param>
            <param name="nodeFilter">
            Node filter expression for Data JSON body.  
            Expression left terms must follow the form of Sqlite JSON paths.
            For example, to retrieve the 'Name' property, use '$.Name', OperatorEnum.Equals, '[name here]'.</param>
            <param name="order">Enumeration order.</param>
            <param name="skip">The number of records to skip.</param>
            <returns>Nodes.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Interfaces.INodeMethods.ReadFirst(System.Guid,System.Guid,System.Collections.Generic.List{System.String},System.Collections.Specialized.NameValueCollection,ExpressionTree.Expr,LiteGraph.EnumerationOrderEnum)">
            <summary>
            Read first.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="labels">Labels.</param>
            <param name="tags">Tags.</param>
            <param name="nodeFilter">
            Node filter expression for Data JSON body.  
            Expression left terms must follow the form of Sqlite JSON paths.
            For example, to retrieve the 'Name' property, use '$.Name', OperatorEnum.Equals, '[name here]'.</param>
            <param name="order">Enumeration order.</param>
            <returns>Node.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Interfaces.INodeMethods.ReadMostConnected(System.Guid,System.Guid,System.Collections.Generic.List{System.String},System.Collections.Specialized.NameValueCollection,ExpressionTree.Expr,System.Int32)">
            <summary>
            Read the most connected nodes.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="labels">Labels.</param>
            <param name="tags">Tags.</param>
            <param name="nodeFilter">
            Node filter expression for Data JSON body.  
            Expression left terms must follow the form of Sqlite JSON paths.
            For example, to retrieve the 'Name' property, use '$.Name', OperatorEnum.Equals, '[name here]'.</param>
            <param name="skip">The number of records to skip.</param>
            <returns>Nodes.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Interfaces.INodeMethods.ReadLeastConnected(System.Guid,System.Guid,System.Collections.Generic.List{System.String},System.Collections.Specialized.NameValueCollection,ExpressionTree.Expr,System.Int32)">
            <summary>
            Read the least connected nodes.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="labels">Labels.</param>
            <param name="tags">Tags.</param>
            <param name="nodeFilter">
            Node filter expression for Data JSON body.  
            Expression left terms must follow the form of Sqlite JSON paths.
            For example, to retrieve the 'Name' property, use '$.Name', OperatorEnum.Equals, '[name here]'.</param>
            <param name="skip">The number of records to skip.</param>
            <returns>Nodes.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Interfaces.INodeMethods.ReadByGuid(System.Guid,System.Guid,System.Guid)">
            <summary>
            Read node.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="nodeGuid">Node GUID.</param>
            <returns>Node.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Interfaces.INodeMethods.Enumerate(LiteGraph.EnumerationQuery)">
            <summary>
            Enumerate objects.
            </summary>
            <param name="query">Enumeration query.</param>
            <returns>Enumeration result containing a page of objects.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Interfaces.INodeMethods.GetRecordCount(System.Nullable{System.Guid},System.Nullable{System.Guid},System.Collections.Generic.List{System.String},System.Collections.Specialized.NameValueCollection,ExpressionTree.Expr,LiteGraph.EnumerationOrderEnum,System.Nullable{System.Guid})">
            <summary>
            Get the record count.  Optionally supply a marker object GUID to indicate that only records from that marker record should be counted.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="labels">Labels.</param>
            <param name="tags">Tags upon which to filter.</param>
            <param name="filter">
            Edge filter expression for Data JSON body.
            Expression left terms must follow the form of Sqlite JSON paths.
            For example, to retrieve the 'Name' property, use '$.Name', OperatorEnum.Equals, '[name here]'.</param>
            <param name="order">Enumeration order.</param>
            <param name="markerGuid">Marker GUID.</param>
            <returns>Number of records.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Interfaces.INodeMethods.Update(LiteGraph.Node)">
            <summary>
            Update node.
            </summary>
            <param name="node"></param>
            <returns>Node.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Interfaces.INodeMethods.DeleteByGuid(System.Guid,System.Guid,System.Guid)">
            <summary>
            Delete a node and all associated edges.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="nodeGuid">Node GUID.</param>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Interfaces.INodeMethods.DeleteAllInTenant(System.Guid)">
            <summary>
            Delete all nodes in a tenant.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Interfaces.INodeMethods.DeleteAllInGraph(System.Guid,System.Guid)">
            <summary>
            Delete all nodes from a graph.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Interfaces.INodeMethods.DeleteMany(System.Guid,System.Guid,System.Collections.Generic.List{System.Guid})">
            <summary>
            Delete multiple nodes from a graph.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="nodeGuids">Node GUIDs.</param>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Interfaces.INodeMethods.ExistsByGuid(System.Guid,System.Guid,System.Guid)">
            <summary>
            Check existence of a node.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="nodeGuid">Node GUID.</param>
            <returns>True if exists.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Interfaces.INodeMethods.ReadParents(System.Guid,System.Guid,System.Guid,LiteGraph.EnumerationOrderEnum,System.Int32)">
            <summary>
            Get nodes that have edges connecting to the specified node.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="nodeGuid">Node GUID.</param>
            <param name="order">Enumeration order.</param>
            <param name="skip">The number of records to skip.</param>
            <returns>Nodes.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Interfaces.INodeMethods.ReadChildren(System.Guid,System.Guid,System.Guid,LiteGraph.EnumerationOrderEnum,System.Int32)">
            <summary>
            Get nodes to which the specified node has connecting edges connecting.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="nodeGuid">Node GUID.</param>
            <param name="order">Enumeration order.</param>
            <param name="skip">The number of records to skip.</param>
            <returns>Nodes.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Interfaces.INodeMethods.ReadNeighbors(System.Guid,System.Guid,System.Guid,LiteGraph.EnumerationOrderEnum,System.Int32)">
            <summary>
            Get neighbors for a given node.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="nodeGuid">Node GUID.</param>
            <param name="order">Enumeration order.</param>
            <param name="skip">The number of records to skip.</param>
            <returns>Nodes.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Interfaces.INodeMethods.ReadRoutes(LiteGraph.SearchTypeEnum,System.Guid,System.Guid,System.Guid,System.Guid,ExpressionTree.Expr,ExpressionTree.Expr)">
            <summary>
            Get routes between two nodes.
            </summary>
            <param name="searchType">Search type.</param>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="fromNodeGuid">From node GUID.</param>
            <param name="toNodeGuid">To node GUID.</param>
            <param name="edgeFilter">
            Edge filter expression for Data JSON body.
            Expression left terms must follow the form of Sqlite JSON paths.
            For example, to retrieve the 'Name' property, use '$.Name', OperatorEnum.Equals, '[name here]'.</param>
            <param name="nodeFilter">
            Node filter expression for Data JSON body.
            Expression left terms must follow the form of Sqlite JSON paths.
            For example, to retrieve the 'Name' property, use '$.Name', OperatorEnum.Equals, '[name here]'.</param>
            <returns>Route details.</returns>
        </member>
        <member name="T:LiteGraph.GraphRepositories.Interfaces.ITagMethods">
            <summary>
            Interface for tag methods.
            Graph repository base methods are responsible only for primitives, not input validation or cross-cutting.
            </summary>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Interfaces.ITagMethods.Create(LiteGraph.TagMetadata)">
            <summary>
            Create a tag.
            </summary>
            <param name="tag">Tag.</param>
            <returns>Tag.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Interfaces.ITagMethods.CreateMany(System.Guid,System.Collections.Generic.List{LiteGraph.TagMetadata})">
            <summary>
            Create multiple tags.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="tags">Tags.</param>
            <returns>Tags.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Interfaces.ITagMethods.ReadAllInTenant(System.Guid,LiteGraph.EnumerationOrderEnum,System.Int32)">
            <summary>
            Read all tags in a given tenant.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="order">Enumeration order.</param>
            <param name="skip">The number of records to skip.</param>
            <returns>Tags.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Interfaces.ITagMethods.ReadAllInGraph(System.Guid,System.Guid,LiteGraph.EnumerationOrderEnum,System.Int32)">
            <summary>
            Read all tags in a given graph.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="order">Enumeration order.</param>
            <param name="skip">The number of records to skip.</param>
            <returns>Tags.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Interfaces.ITagMethods.ReadMany(System.Guid,System.Nullable{System.Guid},System.Nullable{System.Guid},System.Nullable{System.Guid},System.String,System.String,LiteGraph.EnumerationOrderEnum,System.Int32)">
            <summary>
            Read tags.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="nodeGuid">Node GUID.</param>
            <param name="edgeGuid">Edge GUID.</param>
            <param name="key">Key.</param>
            <param name="val">Value.</param>
            <param name="order">Enumeration order.</param>
            <param name="skip">Number of records to skip.</param>
            <returns>Tags.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Interfaces.ITagMethods.ReadManyGraph(System.Guid,System.Guid,LiteGraph.EnumerationOrderEnum,System.Int32)">
            <summary>
            Read graph tags.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="order">Enumeration order.</param>
            <param name="skip">Number of records to skip.</param>
            <returns>Tags.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Interfaces.ITagMethods.ReadManyNode(System.Guid,System.Guid,System.Guid,LiteGraph.EnumerationOrderEnum,System.Int32)">
            <summary>
            Read node tags.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="nodeGuid">Node GUID.</param>
            <param name="order">Enumeration order.</param>
            <param name="skip">Number of records to skip.</param>
            <returns>Tags.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Interfaces.ITagMethods.ReadManyEdge(System.Guid,System.Guid,System.Guid,LiteGraph.EnumerationOrderEnum,System.Int32)">
            <summary>
            Read edge tags.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="edgeGuid">Edge GUID.</param>
            <param name="order">Enumeration order.</param>
            <param name="skip">Number of records to skip.</param>
            <returns>Tags.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Interfaces.ITagMethods.ReadByGuid(System.Guid,System.Guid)">
            <summary>
            Read a tag by GUID.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="guid">GUID.</param>
            <returns>Tag.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Interfaces.ITagMethods.Enumerate(LiteGraph.EnumerationQuery)">
            <summary>
            Enumerate objects.
            </summary>
            <param name="query">Enumeration query.</param>
            <returns>Enumeration result containing a page of objects.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Interfaces.ITagMethods.GetRecordCount(System.Nullable{System.Guid},System.Nullable{System.Guid},LiteGraph.EnumerationOrderEnum,System.Nullable{System.Guid})">
            <summary>
            Get the record count.  Optionally supply a marker object GUID to indicate that only records from that marker record should be counted.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="order">Enumeration order.</param>
            <param name="markerGuid">Marker GUID.</param>
            <returns>Number of records.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Interfaces.ITagMethods.Update(LiteGraph.TagMetadata)">
            <summary>
            Update a tag.
            </summary>
            <param name="tag">Tag.</param>
            <returns>Tag.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Interfaces.ITagMethods.DeleteByGuid(System.Guid,System.Guid)">
            <summary>
            Delete a tag.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="guid">GUID.</param>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Interfaces.ITagMethods.DeleteMany(System.Guid,System.Nullable{System.Guid},System.Collections.Generic.List{System.Guid},System.Collections.Generic.List{System.Guid})">
            <summary>
            Delete tags.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="nodeGuids">Node GUIDs.</param>
            <param name="edgeGuids">Edge GUIDs.</param>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Interfaces.ITagMethods.DeleteMany(System.Guid,System.Collections.Generic.List{System.Guid})">
            <summary>
            Delete tags.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="guids">GUIDs.</param>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Interfaces.ITagMethods.DeleteAllInTenant(System.Guid)">
            <summary>
            Delete all tags in a given tenant.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Interfaces.ITagMethods.DeleteAllInGraph(System.Guid,System.Guid)">
            <summary>
            Delete all tags associated with a graph.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Interfaces.ITagMethods.DeleteGraphTags(System.Guid,System.Guid)">
            <summary>
            Delete tags for the graph object itself, leaving subordinate node and edge tags in place.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Interfaces.ITagMethods.DeleteNodeTags(System.Guid,System.Guid,System.Guid)">
            <summary>
            Delete node tags.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="nodeGuid">Node GUID.</param>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Interfaces.ITagMethods.DeleteEdgeTags(System.Guid,System.Guid,System.Guid)">
            <summary>
            Delete edge tags.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="edgeGuid">Edge GUID.</param>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Interfaces.ITagMethods.ExistsByGuid(System.Guid,System.Guid)">
            <summary>
            Check if a tag exists by GUID.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="guid">GUID.</param>
            <returns>True if exists.</returns>
        </member>
        <member name="T:LiteGraph.GraphRepositories.Interfaces.ITenantMethods">
            <summary>
            Interface for tenant methods.
            Graph repository base methods are responsible only for primitives, not input validation or cross-cutting.
            </summary>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Interfaces.ITenantMethods.Create(LiteGraph.TenantMetadata)">
            <summary>
            Create a tenant.
            </summary>
            <param name="tenant">Tenant.</param>
            <returns>Tenant.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Interfaces.ITenantMethods.ReadMany(LiteGraph.EnumerationOrderEnum,System.Int32)">
            <summary>
            Read tenants.
            </summary>
            <param name="order">Enumeration order.</param>
            <param name="skip">The number of records to skip.</param>
            <returns>Tenants.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Interfaces.ITenantMethods.ReadByGuid(System.Guid)">
            <summary>
            Read a tenant by GUID.
            </summary>
            <param name="guid">GUID.</param>
            <returns>Tenant.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Interfaces.ITenantMethods.Enumerate(LiteGraph.EnumerationQuery)">
            <summary>
            Enumerate objects.
            </summary>
            <param name="query">Enumeration query.</param>
            <returns>Enumeration result containing a page of objects.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Interfaces.ITenantMethods.GetRecordCount(LiteGraph.EnumerationOrderEnum,System.Nullable{System.Guid})">
            <summary>
            Get the record count.  Optionally supply a marker object GUID to indicate that only records from that marker record should be counted.
            </summary>
            <param name="order">Enumeration order.</param>
            <param name="markerGuid">Marker GUID.</param>
            <returns>Number of records.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Interfaces.ITenantMethods.Update(LiteGraph.TenantMetadata)">
            <summary>
            Update a tenant.
            </summary>
            <param name="tenant">Tenant.</param>
            <returns>Tenant.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Interfaces.ITenantMethods.DeleteByGuid(System.Guid,System.Boolean)">
            <summary>
            Delete a tenant.
            </summary>
            <param name="guid">GUID.</param>
            <param name="force">True to force deletion of users and credentials.</param>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Interfaces.ITenantMethods.ExistsByGuid(System.Guid)">
            <summary>
            Check if a tenant exists by GUID.
            </summary>
            <param name="guid">GUID.</param>
            <returns>True if exists.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Interfaces.ITenantMethods.GetStatistics(System.Guid)">
            <summary>
            Retrieve tenant statistics.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <returns>Tenant statistics.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Interfaces.ITenantMethods.GetStatistics">
            <summary>
            Retrieve tenant statistics.
            </summary>
            <returns>Dictionary of tenant statistics.</returns>
        </member>
        <member name="T:LiteGraph.GraphRepositories.Interfaces.IUserMethods">
            <summary>
            Interface for user methods.
            Graph repository base methods are responsible only for primitives, not input validation or cross-cutting.
            </summary>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Interfaces.IUserMethods.Create(LiteGraph.UserMaster)">
            <summary>
            Create a user.
            </summary>
            <param name="user">User.</param>
            <returns>User.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Interfaces.IUserMethods.ReadAllInTenant(System.Guid,LiteGraph.EnumerationOrderEnum,System.Int32)">
            <summary>
            Read all users in a given tenant.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="order">Enumeration order.</param>
            <param name="skip">The number of records to skip.</param>
            <returns>Users.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Interfaces.IUserMethods.ReadMany(System.Nullable{System.Guid},System.String,LiteGraph.EnumerationOrderEnum,System.Int32)">
            <summary>
            Read users.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="email">Email.</param>
            <param name="order">Enumeration order.</param>
            <param name="skip">Number of records to skip.</param>
            <returns>Users.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Interfaces.IUserMethods.ReadByGuid(System.Guid,System.Guid)">
            <summary>
            Read a user by GUID.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="guid">GUID.</param>
            <returns>User.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Interfaces.IUserMethods.ReadTenantsByEmail(System.String)">
            <summary>
            Read tenants associated with a given email address.
            </summary>
            <param name="email">Email address.</param>
            <returns>List of tenants.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Interfaces.IUserMethods.ReadByEmail(System.Guid,System.String)">
            <summary>
            Read a user by email.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="email">Email.</param>
            <returns>User.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Interfaces.IUserMethods.Enumerate(LiteGraph.EnumerationQuery)">
            <summary>
            Enumerate objects.
            </summary>
            <param name="query">Enumeration query.</param>
            <returns>Enumeration result containing a page of objects.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Interfaces.IUserMethods.GetRecordCount(System.Nullable{System.Guid},LiteGraph.EnumerationOrderEnum,System.Nullable{System.Guid})">
            <summary>
            Get the record count.  Optionally supply a marker object GUID to indicate that only records from that marker record should be counted.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="order">Enumeration order.</param>
            <param name="markerGuid">Marker GUID.</param>
            <returns>Number of records.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Interfaces.IUserMethods.Update(LiteGraph.UserMaster)">
            <summary>
            Update a user.
            </summary>
            <param name="user">User.</param>
            <returns>User.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Interfaces.IUserMethods.DeleteByGuid(System.Guid,System.Guid)">
            <summary>
            Delete a user.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="guid">GUID.</param>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Interfaces.IUserMethods.DeleteAllInTenant(System.Guid)">
            <summary>
            Delete users associated with a tenant.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Interfaces.IUserMethods.ExistsByGuid(System.Guid,System.Guid)">
            <summary>
            Check if a user exists by GUID.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="guid">GUID.</param>
            <returns>True if exists.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Interfaces.IUserMethods.ExistsByEmail(System.Guid,System.String)">
            <summary>
            Check if a user exists by email.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="email">Email.</param>
            <returns>True if exists.</returns>
        </member>
        <member name="T:LiteGraph.GraphRepositories.Interfaces.IVectorMethods">
            <summary>
            Interface for vector methods.
            Graph repository base methods are responsible only for primitives, not input validation or cross-cutting.
            </summary>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Interfaces.IVectorMethods.Create(LiteGraph.VectorMetadata)">
            <summary>
            Create a vector.
            </summary>
            <param name="vector">Vector.</param>
            <returns>Vector.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Interfaces.IVectorMethods.CreateMany(System.Guid,System.Collections.Generic.List{LiteGraph.VectorMetadata})">
            <summary>
            Create multiple vectors.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="vectors">Vectors.</param>
            <returns>Vectors.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Interfaces.IVectorMethods.ReadAllInTenant(System.Guid,LiteGraph.EnumerationOrderEnum,System.Int32)">
            <summary>
            Read all vectors in a given tenant.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="order">Enumeration order.</param>
            <param name="skip">The number of records to skip.</param>
            <returns>Vectors.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Interfaces.IVectorMethods.ReadAllInGraph(System.Guid,System.Guid,LiteGraph.EnumerationOrderEnum,System.Int32)">
            <summary>
            Read all vectors in a given graph.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="order">Enumeration order.</param>
            <param name="skip">The number of records to skip.</param>
            <returns>Vectors.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Interfaces.IVectorMethods.ReadMany(System.Guid,System.Nullable{System.Guid},System.Nullable{System.Guid},System.Nullable{System.Guid},LiteGraph.EnumerationOrderEnum,System.Int32)">
            <summary>
            Read vectors.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="nodeGuid">Node GUID.</param>
            <param name="edgeGuid">Edge GUID.</param>
            <param name="order">Enumeration order.</param>
            <param name="skip">Number of records to skip.</param>
            <returns>Vectors.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Interfaces.IVectorMethods.ReadManyGraph(System.Guid,System.Guid,LiteGraph.EnumerationOrderEnum,System.Int32)">
            <summary>
            Read graph vectors.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="order">Enumeration order.</param>
            <param name="skip">Number of records to skip.</param>
            <returns>Vectors.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Interfaces.IVectorMethods.ReadManyNode(System.Guid,System.Guid,System.Guid,LiteGraph.EnumerationOrderEnum,System.Int32)">
            <summary>
            Read node vectors.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="nodeGuid">Node GUID.</param>
            <param name="order">Enumeration order.</param>
            <param name="skip">Number of records to skip.</param>
            <returns>Vectors.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Interfaces.IVectorMethods.ReadManyEdge(System.Guid,System.Guid,System.Guid,LiteGraph.EnumerationOrderEnum,System.Int32)">
            <summary>
            Read edge vectors.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="edgeGuid">Edge GUID.</param>
            <param name="order">Enumeration order.</param>
            <param name="skip">Number of records to skip.</param>
            <returns>Vectors.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Interfaces.IVectorMethods.ReadByGuid(System.Guid,System.Guid)">
            <summary>
            Read a vector by GUID.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="guid">GUID.</param>
            <returns>Vector.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Interfaces.IVectorMethods.Enumerate(LiteGraph.EnumerationQuery)">
            <summary>
            Enumerate objects.
            </summary>
            <param name="query">Enumeration query.</param>
            <returns>Enumeration result containing a page of objects.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Interfaces.IVectorMethods.GetRecordCount(System.Nullable{System.Guid},System.Nullable{System.Guid},LiteGraph.EnumerationOrderEnum,System.Nullable{System.Guid})">
            <summary>
            Get the record count.  Optionally supply a marker object GUID to indicate that only records from that marker record should be counted.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="order">Enumeration order.</param>
            <param name="markerGuid">Marker GUID.</param>
            <returns>Number of records.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Interfaces.IVectorMethods.Update(LiteGraph.VectorMetadata)">
            <summary>
            Update a vector.
            </summary>
            <param name="vector">Vector.</param>
            <returns>Vector.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Interfaces.IVectorMethods.DeleteByGuid(System.Guid,System.Guid)">
            <summary>
            Delete a vector.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="guid">GUID.</param>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Interfaces.IVectorMethods.DeleteMany(System.Guid,System.Nullable{System.Guid},System.Collections.Generic.List{System.Guid},System.Collections.Generic.List{System.Guid})">
            <summary>
            Delete vectors.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="nodeGuids">Node GUIDs.</param>
            <param name="edgeGuids">Edge GUIDs.</param>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Interfaces.IVectorMethods.DeleteMany(System.Guid,System.Collections.Generic.List{System.Guid})">
            <summary>
            Delete vectors.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="guids">GUIDs.</param>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Interfaces.IVectorMethods.DeleteAllInTenant(System.Guid)">
            <summary>
            Delete all vectors in a tenant.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Interfaces.IVectorMethods.DeleteAllInGraph(System.Guid,System.Guid)">
            <summary>
            Delete all vectors associated with a graph.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Interfaces.IVectorMethods.DeleteGraphVectors(System.Guid,System.Guid)">
            <summary>
            Delete vectors for the graph object itself, leaving subordinate node and edge tags in place.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Interfaces.IVectorMethods.DeleteNodeVectors(System.Guid,System.Guid,System.Guid)">
            <summary>
            Delete vectors for a node object.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="nodeGuid">Node GUID.</param>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Interfaces.IVectorMethods.DeleteEdgeVectors(System.Guid,System.Guid,System.Guid)">
            <summary>
            Delete vectors for an edge object.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="edgeGuid">Edge GUID.</param>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Interfaces.IVectorMethods.ExistsByGuid(System.Guid,System.Guid)">
            <summary>
            Check if a vector exists by GUID.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="guid">GUID.</param>
            <returns>True if exists.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Interfaces.IVectorMethods.SearchGraph(LiteGraph.VectorSearchTypeEnum,System.Collections.Generic.List{System.Single},System.Guid,System.Collections.Generic.List{System.String},System.Collections.Specialized.NameValueCollection,ExpressionTree.Expr)">
            <summary>
            Search graph vectors.
            </summary>
            <param name="searchType">Vector search type.</param>
            <param name="vectors">Vectors.</param>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="labels">Labels.</param>
            <param name="tags">Tags.</param>
            <param name="filter">Filter.</param>
            <returns>Vector search results containing graphs.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Interfaces.IVectorMethods.SearchNode(LiteGraph.VectorSearchTypeEnum,System.Collections.Generic.List{System.Single},System.Guid,System.Guid,System.Collections.Generic.List{System.String},System.Collections.Specialized.NameValueCollection,ExpressionTree.Expr)">
            <summary>
            Search node vectors.
            </summary>
            <param name="searchType">Vector search type.</param>
            <param name="vectors">Vectors.</param>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="labels">Labels.</param>
            <param name="tags">Tags.</param>
            <param name="filter">Filter.</param>
            <returns>Vector search results containing nodes.</returns>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Interfaces.IVectorMethods.SearchEdge(LiteGraph.VectorSearchTypeEnum,System.Collections.Generic.List{System.Single},System.Guid,System.Guid,System.Collections.Generic.List{System.String},System.Collections.Specialized.NameValueCollection,ExpressionTree.Expr)">
            <summary>
            Search edge vectors.
            </summary>
            <param name="searchType">Vector search type.</param>
            <param name="vectors">Vectors.</param>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="labels">Labels.</param>
            <param name="tags">Tags.</param>
            <param name="filter">Filter.</param>
            <returns>Vector search results containing edges.</returns>
        </member>
        <member name="T:LiteGraph.GraphRepositories.Sqlite.Implementations.AdminMethods">
            <summary>
            Admin methods.
            Graph repository base methods are responsible only for primitives, not input validation or cross-cutting.
            </summary>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Sqlite.Implementations.AdminMethods.#ctor(LiteGraph.GraphRepositories.Sqlite.SqliteGraphRepository)">
            <summary>
            Admin methods.
            </summary>
            <param name="repo">Graph repository.</param>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Sqlite.Implementations.AdminMethods.Backup(System.String)">
            <inheritdoc />
        </member>
        <member name="T:LiteGraph.GraphRepositories.Sqlite.Implementations.BatchMethods">
            <summary>
            Batch methods.
            Graph repository base methods are responsible only for primitives, not input validation or cross-cutting.
            </summary>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Sqlite.Implementations.BatchMethods.#ctor(LiteGraph.GraphRepositories.Sqlite.SqliteGraphRepository)">
            <summary>
            Batch methods.
            </summary>
            <param name="repo">Graph repository.</param>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Sqlite.Implementations.BatchMethods.Existence(System.Guid,System.Guid,LiteGraph.ExistenceRequest)">
            <inheritdoc />
        </member>
        <member name="T:LiteGraph.GraphRepositories.Sqlite.Implementations.CredentialMethods">
            <summary>
            Credential methods.
            Graph repository base methods are responsible only for primitives, not input validation or cross-cutting.
            </summary>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Sqlite.Implementations.CredentialMethods.#ctor(LiteGraph.GraphRepositories.Sqlite.SqliteGraphRepository)">
            <summary>
            Credential methods.
            </summary>
            <param name="repo">Graph repository.</param>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Sqlite.Implementations.CredentialMethods.Create(LiteGraph.Credential)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.Sqlite.Implementations.CredentialMethods.DeleteAllInTenant(System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.Sqlite.Implementations.CredentialMethods.DeleteByGuid(System.Guid,System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.Sqlite.Implementations.CredentialMethods.DeleteByUser(System.Guid,System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.Sqlite.Implementations.CredentialMethods.ExistsByGuid(System.Guid,System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.Sqlite.Implementations.CredentialMethods.ReadAllInTenant(System.Guid,LiteGraph.EnumerationOrderEnum,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.Sqlite.Implementations.CredentialMethods.ReadByGuid(System.Guid,System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.Sqlite.Implementations.CredentialMethods.ReadByBearerToken(System.String)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.Sqlite.Implementations.CredentialMethods.ReadMany(System.Nullable{System.Guid},System.Nullable{System.Guid},System.String,LiteGraph.EnumerationOrderEnum,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.Sqlite.Implementations.CredentialMethods.Enumerate(LiteGraph.EnumerationQuery)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.Sqlite.Implementations.CredentialMethods.GetRecordCount(System.Nullable{System.Guid},System.Nullable{System.Guid},LiteGraph.EnumerationOrderEnum,System.Nullable{System.Guid})">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.Sqlite.Implementations.CredentialMethods.Update(LiteGraph.Credential)">
            <inheritdoc />
        </member>
        <member name="T:LiteGraph.GraphRepositories.Sqlite.Implementations.EdgeMethods">
            <summary>
            Edge methods.
            Graph repository base methods are responsible only for primitives, not input validation or cross-cutting.
            </summary>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Sqlite.Implementations.EdgeMethods.#ctor(LiteGraph.GraphRepositories.Sqlite.SqliteGraphRepository)">
            <summary>
            Edge methods.
            </summary>
            <param name="repo">Graph repository.</param>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Sqlite.Implementations.EdgeMethods.Create(LiteGraph.Edge)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.Sqlite.Implementations.EdgeMethods.CreateMany(System.Guid,System.Guid,System.Collections.Generic.List{LiteGraph.Edge})">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.Sqlite.Implementations.EdgeMethods.ReadAllInTenant(System.Guid,LiteGraph.EnumerationOrderEnum,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.Sqlite.Implementations.EdgeMethods.ReadAllInGraph(System.Guid,System.Guid,LiteGraph.EnumerationOrderEnum,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.Sqlite.Implementations.EdgeMethods.ReadMany(System.Guid,System.Guid,System.Collections.Generic.List{System.String},System.Collections.Specialized.NameValueCollection,ExpressionTree.Expr,LiteGraph.EnumerationOrderEnum,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.Sqlite.Implementations.EdgeMethods.ReadFirst(System.Guid,System.Guid,System.Collections.Generic.List{System.String},System.Collections.Specialized.NameValueCollection,ExpressionTree.Expr,LiteGraph.EnumerationOrderEnum)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.Sqlite.Implementations.EdgeMethods.ReadByGuid(System.Guid,System.Guid,System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.Sqlite.Implementations.EdgeMethods.ReadNodeEdges(System.Guid,System.Guid,System.Guid,System.Collections.Generic.List{System.String},System.Collections.Specialized.NameValueCollection,ExpressionTree.Expr,LiteGraph.EnumerationOrderEnum,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.Sqlite.Implementations.EdgeMethods.ReadEdgesFromNode(System.Guid,System.Guid,System.Guid,System.Collections.Generic.List{System.String},System.Collections.Specialized.NameValueCollection,ExpressionTree.Expr,LiteGraph.EnumerationOrderEnum,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.Sqlite.Implementations.EdgeMethods.ReadEdgesToNode(System.Guid,System.Guid,System.Guid,System.Collections.Generic.List{System.String},System.Collections.Specialized.NameValueCollection,ExpressionTree.Expr,LiteGraph.EnumerationOrderEnum,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.Sqlite.Implementations.EdgeMethods.ReadEdgesBetweenNodes(System.Guid,System.Guid,System.Guid,System.Guid,System.Collections.Generic.List{System.String},System.Collections.Specialized.NameValueCollection,ExpressionTree.Expr,LiteGraph.EnumerationOrderEnum,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.Sqlite.Implementations.EdgeMethods.Enumerate(LiteGraph.EnumerationQuery)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.Sqlite.Implementations.EdgeMethods.GetRecordCount(System.Nullable{System.Guid},System.Nullable{System.Guid},System.Collections.Generic.List{System.String},System.Collections.Specialized.NameValueCollection,ExpressionTree.Expr,LiteGraph.EnumerationOrderEnum,System.Nullable{System.Guid})">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.Sqlite.Implementations.EdgeMethods.Update(LiteGraph.Edge)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.Sqlite.Implementations.EdgeMethods.DeleteByGuid(System.Guid,System.Guid,System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.Sqlite.Implementations.EdgeMethods.DeleteAllInTenant(System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.Sqlite.Implementations.EdgeMethods.DeleteAllInGraph(System.Guid,System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.Sqlite.Implementations.EdgeMethods.DeleteMany(System.Guid,System.Guid,System.Collections.Generic.List{System.Guid})">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.Sqlite.Implementations.EdgeMethods.DeleteNodeEdges(System.Guid,System.Guid,System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.Sqlite.Implementations.EdgeMethods.DeleteNodeEdges(System.Guid,System.Guid,System.Collections.Generic.List{System.Guid})">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.Sqlite.Implementations.EdgeMethods.ExistsByGuid(System.Guid,System.Guid,System.Guid)">
            <inheritdoc />
        </member>
        <member name="T:LiteGraph.GraphRepositories.Sqlite.Implementations.GraphMethods">
            <summary>
            Graph methods.
            Graph repository base methods are responsible only for primitives, not input validation or cross-cutting.
            </summary>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Sqlite.Implementations.GraphMethods.#ctor(LiteGraph.GraphRepositories.Sqlite.SqliteGraphRepository)">
            <summary>
            Graph methods.
            </summary>
            <param name="repo">Graph repository.</param>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Sqlite.Implementations.GraphMethods.Create(LiteGraph.Graph)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.Sqlite.Implementations.GraphMethods.ReadAllInTenant(System.Guid,LiteGraph.EnumerationOrderEnum,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.Sqlite.Implementations.GraphMethods.ReadMany(System.Guid,System.Collections.Generic.List{System.String},System.Collections.Specialized.NameValueCollection,ExpressionTree.Expr,LiteGraph.EnumerationOrderEnum,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.Sqlite.Implementations.GraphMethods.ReadFirst(System.Guid,System.Collections.Generic.List{System.String},System.Collections.Specialized.NameValueCollection,ExpressionTree.Expr,LiteGraph.EnumerationOrderEnum)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.Sqlite.Implementations.GraphMethods.ReadByGuid(System.Guid,System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.Sqlite.Implementations.GraphMethods.Enumerate(LiteGraph.EnumerationQuery)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.Sqlite.Implementations.GraphMethods.GetRecordCount(System.Nullable{System.Guid},System.Collections.Generic.List{System.String},System.Collections.Specialized.NameValueCollection,ExpressionTree.Expr,LiteGraph.EnumerationOrderEnum,System.Nullable{System.Guid})">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.Sqlite.Implementations.GraphMethods.Update(LiteGraph.Graph)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.Sqlite.Implementations.GraphMethods.DeleteAllInTenant(System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.Sqlite.Implementations.GraphMethods.DeleteByGuid(System.Guid,System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.Sqlite.Implementations.GraphMethods.ExistsByGuid(System.Guid,System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.Sqlite.Implementations.GraphMethods.GetStatistics(System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.Sqlite.Implementations.GraphMethods.GetStatistics(System.Guid,System.Guid)">
            <inheritdoc />
        </member>
        <member name="T:LiteGraph.GraphRepositories.Sqlite.Implementations.LabelMethods">
            <summary>
            Label methods.
            Graph repository base methods are responsible only for primitives, not input validation or cross-cutting.
            </summary>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Sqlite.Implementations.LabelMethods.#ctor(LiteGraph.GraphRepositories.Sqlite.SqliteGraphRepository)">
            <summary>
            Label methods.
            </summary>
            <param name="repo">Graph repository.</param>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Sqlite.Implementations.LabelMethods.Create(LiteGraph.LabelMetadata)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.Sqlite.Implementations.LabelMethods.CreateMany(System.Guid,System.Collections.Generic.List{LiteGraph.LabelMetadata})">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.Sqlite.Implementations.LabelMethods.DeleteByGuid(System.Guid,System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.Sqlite.Implementations.LabelMethods.DeleteMany(System.Guid,System.Nullable{System.Guid},System.Collections.Generic.List{System.Guid},System.Collections.Generic.List{System.Guid})">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.Sqlite.Implementations.LabelMethods.DeleteMany(System.Guid,System.Collections.Generic.List{System.Guid})">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.Sqlite.Implementations.LabelMethods.DeleteAllInTenant(System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.Sqlite.Implementations.LabelMethods.DeleteAllInGraph(System.Guid,System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.Sqlite.Implementations.LabelMethods.DeleteGraphLabels(System.Guid,System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.Sqlite.Implementations.LabelMethods.DeleteNodeLabels(System.Guid,System.Guid,System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.Sqlite.Implementations.LabelMethods.DeleteEdgeLabels(System.Guid,System.Guid,System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.Sqlite.Implementations.LabelMethods.ExistsByGuid(System.Guid,System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.Sqlite.Implementations.LabelMethods.ReadAllInTenant(System.Guid,LiteGraph.EnumerationOrderEnum,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.Sqlite.Implementations.LabelMethods.ReadAllInGraph(System.Guid,System.Guid,LiteGraph.EnumerationOrderEnum,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.Sqlite.Implementations.LabelMethods.ReadByGuid(System.Guid,System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.Sqlite.Implementations.LabelMethods.ReadMany(System.Guid,System.Nullable{System.Guid},System.Nullable{System.Guid},System.Nullable{System.Guid},System.String,LiteGraph.EnumerationOrderEnum,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.Sqlite.Implementations.LabelMethods.ReadManyGraph(System.Guid,System.Guid,LiteGraph.EnumerationOrderEnum,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.Sqlite.Implementations.LabelMethods.ReadManyNode(System.Guid,System.Guid,System.Guid,LiteGraph.EnumerationOrderEnum,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.Sqlite.Implementations.LabelMethods.ReadManyEdge(System.Guid,System.Guid,System.Guid,LiteGraph.EnumerationOrderEnum,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.Sqlite.Implementations.LabelMethods.Enumerate(LiteGraph.EnumerationQuery)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.Sqlite.Implementations.LabelMethods.GetRecordCount(System.Nullable{System.Guid},System.Nullable{System.Guid},LiteGraph.EnumerationOrderEnum,System.Nullable{System.Guid})">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.Sqlite.Implementations.LabelMethods.Update(LiteGraph.LabelMetadata)">
            <inheritdoc />
        </member>
        <member name="T:LiteGraph.GraphRepositories.Sqlite.Implementations.NodeMethods">
            <summary>
            Node methods.
            Graph repository base methods are responsible only for primitives, not input validation or cross-cutting.
            </summary>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Sqlite.Implementations.NodeMethods.#ctor(LiteGraph.GraphRepositories.Sqlite.SqliteGraphRepository)">
            <summary>
            Node methods.
            </summary>
            <param name="repo">Graph repository.</param>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Sqlite.Implementations.NodeMethods.Create(LiteGraph.Node)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.Sqlite.Implementations.NodeMethods.CreateMany(System.Guid,System.Guid,System.Collections.Generic.List{LiteGraph.Node})">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.Sqlite.Implementations.NodeMethods.ReadAllInTenant(System.Guid,LiteGraph.EnumerationOrderEnum,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.Sqlite.Implementations.NodeMethods.ReadAllInGraph(System.Guid,System.Guid,LiteGraph.EnumerationOrderEnum,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.Sqlite.Implementations.NodeMethods.ReadMany(System.Guid,System.Guid,System.Collections.Generic.List{System.String},System.Collections.Specialized.NameValueCollection,ExpressionTree.Expr,LiteGraph.EnumerationOrderEnum,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.Sqlite.Implementations.NodeMethods.ReadFirst(System.Guid,System.Guid,System.Collections.Generic.List{System.String},System.Collections.Specialized.NameValueCollection,ExpressionTree.Expr,LiteGraph.EnumerationOrderEnum)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.Sqlite.Implementations.NodeMethods.ReadMostConnected(System.Guid,System.Guid,System.Collections.Generic.List{System.String},System.Collections.Specialized.NameValueCollection,ExpressionTree.Expr,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.Sqlite.Implementations.NodeMethods.ReadLeastConnected(System.Guid,System.Guid,System.Collections.Generic.List{System.String},System.Collections.Specialized.NameValueCollection,ExpressionTree.Expr,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.Sqlite.Implementations.NodeMethods.ReadByGuid(System.Guid,System.Guid,System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.Sqlite.Implementations.NodeMethods.Enumerate(LiteGraph.EnumerationQuery)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.Sqlite.Implementations.NodeMethods.GetRecordCount(System.Nullable{System.Guid},System.Nullable{System.Guid},System.Collections.Generic.List{System.String},System.Collections.Specialized.NameValueCollection,ExpressionTree.Expr,LiteGraph.EnumerationOrderEnum,System.Nullable{System.Guid})">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.Sqlite.Implementations.NodeMethods.Update(LiteGraph.Node)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.Sqlite.Implementations.NodeMethods.DeleteByGuid(System.Guid,System.Guid,System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.Sqlite.Implementations.NodeMethods.DeleteAllInTenant(System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.Sqlite.Implementations.NodeMethods.DeleteAllInGraph(System.Guid,System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.Sqlite.Implementations.NodeMethods.DeleteMany(System.Guid,System.Guid,System.Collections.Generic.List{System.Guid})">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.Sqlite.Implementations.NodeMethods.ExistsByGuid(System.Guid,System.Guid,System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.Sqlite.Implementations.NodeMethods.ReadParents(System.Guid,System.Guid,System.Guid,LiteGraph.EnumerationOrderEnum,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.Sqlite.Implementations.NodeMethods.ReadChildren(System.Guid,System.Guid,System.Guid,LiteGraph.EnumerationOrderEnum,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.Sqlite.Implementations.NodeMethods.ReadNeighbors(System.Guid,System.Guid,System.Guid,LiteGraph.EnumerationOrderEnum,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.Sqlite.Implementations.NodeMethods.ReadRoutes(LiteGraph.SearchTypeEnum,System.Guid,System.Guid,System.Guid,System.Guid,ExpressionTree.Expr,ExpressionTree.Expr)">
            <inheritdoc />
        </member>
        <member name="T:LiteGraph.GraphRepositories.Sqlite.Implementations.TagMethods">
            <summary>
            Tag methods.
            Graph repository base methods are responsible only for primitives, not input validation or cross-cutting.
            </summary>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Sqlite.Implementations.TagMethods.#ctor(LiteGraph.GraphRepositories.Sqlite.SqliteGraphRepository)">
            <summary>
            Tag methods.
            </summary>
            <param name="repo">Graph repository.</param>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Sqlite.Implementations.TagMethods.Create(LiteGraph.TagMetadata)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.Sqlite.Implementations.TagMethods.CreateMany(System.Guid,System.Collections.Generic.List{LiteGraph.TagMetadata})">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.Sqlite.Implementations.TagMethods.DeleteByGuid(System.Guid,System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.Sqlite.Implementations.TagMethods.DeleteMany(System.Guid,System.Nullable{System.Guid},System.Collections.Generic.List{System.Guid},System.Collections.Generic.List{System.Guid})">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.Sqlite.Implementations.TagMethods.DeleteMany(System.Guid,System.Collections.Generic.List{System.Guid})">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.Sqlite.Implementations.TagMethods.DeleteAllInTenant(System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.Sqlite.Implementations.TagMethods.DeleteAllInGraph(System.Guid,System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.Sqlite.Implementations.TagMethods.DeleteGraphTags(System.Guid,System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.Sqlite.Implementations.TagMethods.DeleteNodeTags(System.Guid,System.Guid,System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.Sqlite.Implementations.TagMethods.DeleteEdgeTags(System.Guid,System.Guid,System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.Sqlite.Implementations.TagMethods.ExistsByGuid(System.Guid,System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.Sqlite.Implementations.TagMethods.ReadAllInTenant(System.Guid,LiteGraph.EnumerationOrderEnum,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.Sqlite.Implementations.TagMethods.ReadAllInGraph(System.Guid,System.Guid,LiteGraph.EnumerationOrderEnum,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.Sqlite.Implementations.TagMethods.ReadByGuid(System.Guid,System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.Sqlite.Implementations.TagMethods.ReadMany(System.Guid,System.Nullable{System.Guid},System.Nullable{System.Guid},System.Nullable{System.Guid},System.String,System.String,LiteGraph.EnumerationOrderEnum,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.Sqlite.Implementations.TagMethods.ReadManyGraph(System.Guid,System.Guid,LiteGraph.EnumerationOrderEnum,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.Sqlite.Implementations.TagMethods.ReadManyNode(System.Guid,System.Guid,System.Guid,LiteGraph.EnumerationOrderEnum,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.Sqlite.Implementations.TagMethods.ReadManyEdge(System.Guid,System.Guid,System.Guid,LiteGraph.EnumerationOrderEnum,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.Sqlite.Implementations.TagMethods.Enumerate(LiteGraph.EnumerationQuery)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.Sqlite.Implementations.TagMethods.GetRecordCount(System.Nullable{System.Guid},System.Nullable{System.Guid},LiteGraph.EnumerationOrderEnum,System.Nullable{System.Guid})">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.Sqlite.Implementations.TagMethods.Update(LiteGraph.TagMetadata)">
            <inheritdoc />
        </member>
        <member name="T:LiteGraph.GraphRepositories.Sqlite.Implementations.TenantMethods">
            <summary>
            Tenant methods.
            Graph repository base methods are responsible only for primitives, not input validation or cross-cutting.
            </summary>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Sqlite.Implementations.TenantMethods.#ctor(LiteGraph.GraphRepositories.Sqlite.SqliteGraphRepository)">
            <summary>
            Tenant methods.
            </summary>
            <param name="repo">Graph repository.</param>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Sqlite.Implementations.TenantMethods.Create(LiteGraph.TenantMetadata)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.Sqlite.Implementations.TenantMethods.DeleteByGuid(System.Guid,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.Sqlite.Implementations.TenantMethods.ExistsByGuid(System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.Sqlite.Implementations.TenantMethods.ReadByGuid(System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.Sqlite.Implementations.TenantMethods.ReadMany(LiteGraph.EnumerationOrderEnum,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.Sqlite.Implementations.TenantMethods.Enumerate(LiteGraph.EnumerationQuery)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.Sqlite.Implementations.TenantMethods.GetRecordCount(LiteGraph.EnumerationOrderEnum,System.Nullable{System.Guid})">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.Sqlite.Implementations.TenantMethods.Update(LiteGraph.TenantMetadata)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.Sqlite.Implementations.TenantMethods.GetStatistics">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.Sqlite.Implementations.TenantMethods.GetStatistics(System.Guid)">
            <inheritdoc />
        </member>
        <member name="T:LiteGraph.GraphRepositories.Sqlite.Implementations.UserMethods">
            <summary>
            User methods.
            Graph repository base methods are responsible only for primitives, not input validation or cross-cutting.
            </summary>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Sqlite.Implementations.UserMethods.#ctor(LiteGraph.GraphRepositories.Sqlite.SqliteGraphRepository)">
            <summary>
            User methods.
            </summary>
            <param name="repo">Graph repository.</param>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Sqlite.Implementations.UserMethods.Create(LiteGraph.UserMaster)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.Sqlite.Implementations.UserMethods.DeleteByGuid(System.Guid,System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.Sqlite.Implementations.UserMethods.DeleteAllInTenant(System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.Sqlite.Implementations.UserMethods.ExistsByGuid(System.Guid,System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.Sqlite.Implementations.UserMethods.ExistsByEmail(System.Guid,System.String)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.Sqlite.Implementations.UserMethods.ReadAllInTenant(System.Guid,LiteGraph.EnumerationOrderEnum,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.Sqlite.Implementations.UserMethods.ReadByGuid(System.Guid,System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.Sqlite.Implementations.UserMethods.ReadTenantsByEmail(System.String)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.Sqlite.Implementations.UserMethods.ReadByEmail(System.Guid,System.String)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.Sqlite.Implementations.UserMethods.ReadMany(System.Nullable{System.Guid},System.String,LiteGraph.EnumerationOrderEnum,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.Sqlite.Implementations.UserMethods.Enumerate(LiteGraph.EnumerationQuery)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.Sqlite.Implementations.UserMethods.GetRecordCount(System.Nullable{System.Guid},LiteGraph.EnumerationOrderEnum,System.Nullable{System.Guid})">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.Sqlite.Implementations.UserMethods.Update(LiteGraph.UserMaster)">
            <inheritdoc />
        </member>
        <member name="T:LiteGraph.GraphRepositories.Sqlite.Implementations.VectorMethods">
            <summary>
            Vector methods.
            Graph repository base methods are responsible only for primitives, not input validation or cross-cutting.
            </summary>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Sqlite.Implementations.VectorMethods.#ctor(LiteGraph.GraphRepositories.Sqlite.SqliteGraphRepository)">
            <summary>
            Vector methods.
            </summary>
            <param name="repo">Graph repository.</param>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Sqlite.Implementations.VectorMethods.Create(LiteGraph.VectorMetadata)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.Sqlite.Implementations.VectorMethods.CreateMany(System.Guid,System.Collections.Generic.List{LiteGraph.VectorMetadata})">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.Sqlite.Implementations.VectorMethods.DeleteByGuid(System.Guid,System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.Sqlite.Implementations.VectorMethods.DeleteMany(System.Guid,System.Nullable{System.Guid},System.Collections.Generic.List{System.Guid},System.Collections.Generic.List{System.Guid})">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.Sqlite.Implementations.VectorMethods.DeleteMany(System.Guid,System.Collections.Generic.List{System.Guid})">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.Sqlite.Implementations.VectorMethods.DeleteAllInTenant(System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.Sqlite.Implementations.VectorMethods.DeleteAllInGraph(System.Guid,System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.Sqlite.Implementations.VectorMethods.DeleteGraphVectors(System.Guid,System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.Sqlite.Implementations.VectorMethods.DeleteNodeVectors(System.Guid,System.Guid,System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.Sqlite.Implementations.VectorMethods.DeleteEdgeVectors(System.Guid,System.Guid,System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.Sqlite.Implementations.VectorMethods.ExistsByGuid(System.Guid,System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.Sqlite.Implementations.VectorMethods.ReadAllInTenant(System.Guid,LiteGraph.EnumerationOrderEnum,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.Sqlite.Implementations.VectorMethods.ReadAllInGraph(System.Guid,System.Guid,LiteGraph.EnumerationOrderEnum,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.Sqlite.Implementations.VectorMethods.ReadByGuid(System.Guid,System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.Sqlite.Implementations.VectorMethods.ReadMany(System.Guid,System.Nullable{System.Guid},System.Nullable{System.Guid},System.Nullable{System.Guid},LiteGraph.EnumerationOrderEnum,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.Sqlite.Implementations.VectorMethods.ReadManyGraph(System.Guid,System.Guid,LiteGraph.EnumerationOrderEnum,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.Sqlite.Implementations.VectorMethods.ReadManyNode(System.Guid,System.Guid,System.Guid,LiteGraph.EnumerationOrderEnum,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.Sqlite.Implementations.VectorMethods.ReadManyEdge(System.Guid,System.Guid,System.Guid,LiteGraph.EnumerationOrderEnum,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.Sqlite.Implementations.VectorMethods.Enumerate(LiteGraph.EnumerationQuery)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.Sqlite.Implementations.VectorMethods.GetRecordCount(System.Nullable{System.Guid},System.Nullable{System.Guid},LiteGraph.EnumerationOrderEnum,System.Nullable{System.Guid})">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.Sqlite.Implementations.VectorMethods.Update(LiteGraph.VectorMetadata)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.Sqlite.Implementations.VectorMethods.SearchGraph(LiteGraph.VectorSearchTypeEnum,System.Collections.Generic.List{System.Single},System.Guid,System.Collections.Generic.List{System.String},System.Collections.Specialized.NameValueCollection,ExpressionTree.Expr)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.Sqlite.Implementations.VectorMethods.SearchNode(LiteGraph.VectorSearchTypeEnum,System.Collections.Generic.List{System.Single},System.Guid,System.Guid,System.Collections.Generic.List{System.String},System.Collections.Specialized.NameValueCollection,ExpressionTree.Expr)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.Sqlite.Implementations.VectorMethods.SearchEdge(LiteGraph.VectorSearchTypeEnum,System.Collections.Generic.List{System.Single},System.Guid,System.Guid,System.Collections.Generic.List{System.String},System.Collections.Specialized.NameValueCollection,ExpressionTree.Expr)">
            <inheritdoc />
        </member>
        <member name="T:LiteGraph.GraphRepositories.Sqlite.SqliteGraphRepository">
            <summary>
            Sqlite graph repository.
            The graph repository base class is only responsible for primitives.
            Validation and cross-cutting functions should be performed in LiteGraphClient rather than in the graph repository base.
            </summary>
        </member>
        <member name="P:LiteGraph.GraphRepositories.Sqlite.SqliteGraphRepository.Filename">
            <summary>
            Sqlite database filename.
            </summary>
        </member>
        <member name="P:LiteGraph.GraphRepositories.Sqlite.SqliteGraphRepository.MaxStatementLength">
            <summary>
            Maximum supported statement length.
            Default for Sqlite is 1,000,000,000 (see https://www.sqlite.org/limits.html).
            </summary>
        </member>
        <member name="P:LiteGraph.GraphRepositories.Sqlite.SqliteGraphRepository.SelectBatchSize">
            <summary>
            Number of records to retrieve for object list retrieval.
            </summary>
        </member>
        <member name="P:LiteGraph.GraphRepositories.Sqlite.SqliteGraphRepository.TimestampFormat">
            <summary>
            Timestamp format.
            </summary>
        </member>
        <member name="P:LiteGraph.GraphRepositories.Sqlite.SqliteGraphRepository.Admin">
            <summary>
            Admin methods.
            </summary>
        </member>
        <member name="P:LiteGraph.GraphRepositories.Sqlite.SqliteGraphRepository.Batch">
            <summary>
            Batch methods.
            </summary>
        </member>
        <member name="P:LiteGraph.GraphRepositories.Sqlite.SqliteGraphRepository.Credential">
            <summary>
            Credential methods.
            </summary>
        </member>
        <member name="P:LiteGraph.GraphRepositories.Sqlite.SqliteGraphRepository.Edge">
            <summary>
            Edge methods.
            </summary>
        </member>
        <member name="P:LiteGraph.GraphRepositories.Sqlite.SqliteGraphRepository.Graph">
            <summary>
            Graph methods.
            </summary>
        </member>
        <member name="P:LiteGraph.GraphRepositories.Sqlite.SqliteGraphRepository.Label">
            <summary>
            Label methods.
            </summary>
        </member>
        <member name="P:LiteGraph.GraphRepositories.Sqlite.SqliteGraphRepository.Node">
            <summary>
            Node methods.
            </summary>
        </member>
        <member name="P:LiteGraph.GraphRepositories.Sqlite.SqliteGraphRepository.Tag">
            <summary>
            Tag methods.
            </summary>
        </member>
        <member name="P:LiteGraph.GraphRepositories.Sqlite.SqliteGraphRepository.Tenant">
            <summary>
            Tenant methods.
            </summary>
        </member>
        <member name="P:LiteGraph.GraphRepositories.Sqlite.SqliteGraphRepository.User">
            <summary>
            User methods.
            </summary>
        </member>
        <member name="P:LiteGraph.GraphRepositories.Sqlite.SqliteGraphRepository.Vector">
            <summary>
            Vector methods.
            </summary>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Sqlite.SqliteGraphRepository.#ctor(System.String,System.Boolean)">
            <summary>
            Instantiate.
            </summary>
            <param name="filename">Sqlite database filename.</param>
            <param name="inMemory">Boolean indicating whether or not the database should be held in-memory and flushed periodically to disk by user instruction.</param>
        </member>
        <member name="M:LiteGraph.GraphRepositories.Sqlite.SqliteGraphRepository.InitializeRepository">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.GraphRepositories.Sqlite.SqliteGraphRepository.Flush">
            <summary>
            Saves the in-memory database back to disk file
            </summary>
        </member>
        <member name="T:LiteGraph.GraphStatistics">
            <summary>
            Graph statistics.
            </summary>
        </member>
        <member name="P:LiteGraph.GraphStatistics.Nodes">
            <summary>
            Number of nodes.
            </summary>
        </member>
        <member name="P:LiteGraph.GraphStatistics.Edges">
            <summary>
            Number of edges.
            </summary>
        </member>
        <member name="P:LiteGraph.GraphStatistics.Labels">
            <summary>
            Number of labels.
            </summary>
        </member>
        <member name="P:LiteGraph.GraphStatistics.Tags">
            <summary>
            Number of tags.
            </summary>
        </member>
        <member name="P:LiteGraph.GraphStatistics.Vectors">
            <summary>
            Number of vectors.
            </summary>
        </member>
        <member name="M:LiteGraph.GraphStatistics.#ctor">
            <summary>
            Graph statistics.
            </summary>
        </member>
        <member name="T:LiteGraph.Helpers.FileHelpers">
            <summary>
            File helpers.
            </summary>
        </member>
        <member name="M:LiteGraph.Helpers.FileHelpers.NormalizeDirectory(System.String)">
            <summary>
            Normalize a directory.
            </summary>
            <param name="directory">Directory.</param>
            <returns>Directory.</returns>
        </member>
        <member name="T:LiteGraph.Helpers.HashHelper">
            <summary>
            Hash methods.
            </summary>
        </member>
        <member name="M:LiteGraph.Helpers.HashHelper.MD5Hash(System.Byte[])">
            <summary>
            Generate an MD5 hash.
            </summary>
            <param name="data">Data.</param>
            <returns>MD5 hash.</returns>
        </member>
        <member name="M:LiteGraph.Helpers.HashHelper.MD5Hash(System.IO.Stream)">
            <summary>
            Generate an MD5 hash.
            </summary>
            <param name="stream">Stream.</param>
            <returns>MD5 hash.</returns>
        </member>
        <member name="M:LiteGraph.Helpers.HashHelper.MD5Hash(System.String)">
            <summary>
            Generate an MD5 hash of a string.
            </summary>
            <param name="str">String.</param>
            <returns>MD5 hash.</returns>
        </member>
        <member name="M:LiteGraph.Helpers.HashHelper.MD5Hash(System.Collections.Generic.List{System.String})">
            <summary>
            Generate an MD5 hash of a list of strings.
            </summary>
            <param name="strings">Strings.</param>
            <returns>MD5 hash.</returns>
        </member>
        <member name="M:LiteGraph.Helpers.HashHelper.MD5Hash(System.Data.DataTable)">
            <summary>
            Generate an MD5 hash of a DataTable.
            This method concatenates column names (separated by a null character) and all cell values (separated by a null character).  Any null cells have their value replaced with the string NULL.
            </summary>
            <param name="dt">DataTable. </param>
            <returns>MD5 hash.</returns>
        </member>
        <member name="M:LiteGraph.Helpers.HashHelper.SHA1Hash(System.Byte[])">
            <summary>
            Generate a SHA1 hash of a byte array.
            </summary>
            <param name="data">Data.</param>
            <returns>SHA1 hash.</returns>
        </member>
        <member name="M:LiteGraph.Helpers.HashHelper.SHA1Hash(System.IO.Stream)">
            <summary>
            Generate a SHA1 hash.
            </summary>
            <param name="stream">Stream.</param>
            <returns>MD5 hash.</returns>
        </member>
        <member name="M:LiteGraph.Helpers.HashHelper.SHA1Hash(System.String)">
            <summary>
            Generate a SHA1 hash of a string.
            </summary>
            <param name="str">String.</param>
            <returns>SHA1 hash.</returns>
        </member>
        <member name="M:LiteGraph.Helpers.HashHelper.SHA1Hash(System.Collections.Generic.List{System.String})">
            <summary>
            Generate a SHA1 hash of a list of strings.
            </summary>
            <param name="strings">Strings.</param>
            <returns>SHA1 hash.</returns>
        </member>
        <member name="M:LiteGraph.Helpers.HashHelper.SHA1Hash(System.Data.DataTable)">
            <summary>
            Generate a SHA1 hash of a DataTable.
            This method concatenates column names (separated by a null character) and all cell values (separated by a null character).  Any null cells have their value replaced with the string NULL.
            </summary>
            <param name="dt">DataTable. </param>
            <returns>SHA1 hash.</returns>
        </member>
        <member name="M:LiteGraph.Helpers.HashHelper.SHA256Hash(System.Byte[])">
            <summary>
            Generate a SHA256 hash of a byte array.
            </summary>
            <param name="data">Data.</param>
            <returns>SHA256 hash.</returns>
        </member>
        <member name="M:LiteGraph.Helpers.HashHelper.SHA256Hash(System.IO.Stream)">
            <summary>
            Generate a SHA256 hash.
            </summary>
            <param name="stream">Stream.</param>
            <returns>MD5 hash.</returns>
        </member>
        <member name="M:LiteGraph.Helpers.HashHelper.SHA256Hash(System.String)">
            <summary>
            Generate a SHA256 hash of a string.
            </summary>
            <param name="str">String.</param>
            <returns>SHA256 hash.</returns>
        </member>
        <member name="M:LiteGraph.Helpers.HashHelper.SHA256Hash(System.Collections.Generic.List{System.String})">
            <summary>
            Generate a SHA256 hash of a list of strings.
            </summary>
            <param name="strings">Strings.</param>
            <returns>SHA256 hash.</returns>
        </member>
        <member name="M:LiteGraph.Helpers.HashHelper.SHA256Hash(System.Data.DataTable)">
            <summary>
            Generate a SHA256 hash of a DataTable.
            This method concatenates column names (separated by a null character) and all cell values (separated by a null character).  Any null cells have their value replaced with the string NULL.
            </summary>
            <param name="dt">DataTable. </param>
            <returns>SHA256 hash.</returns>
        </member>
        <member name="T:LiteGraph.Helpers.NvcHelpers">
            <summary>
            Name-value collection helpers.
            </summary>
        </member>
        <member name="M:LiteGraph.Helpers.NvcHelpers.Combine(System.Collections.Specialized.NameValueCollection,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Combine two name-value collections.
            </summary>
            <param name="nvc1">Name-value collection 1.</param>
            <param name="nvc2">Name-value collection 2.</param>
            <returns>Name-value collection.</returns>
        </member>
        <member name="T:LiteGraph.Helpers.StringHelpers">
            <summary>
            String collection helpers.
            </summary>
        </member>
        <member name="M:LiteGraph.Helpers.StringHelpers.Combine(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})">
            <summary>
            Combine two string lists.
            </summary>
            <param name="list1">String list 1.</param>
            <param name="list2">String list 2.</param>
            <returns>String list.</returns>
        </member>
        <member name="M:LiteGraph.Helpers.StringHelpers.RedactTail(System.String,System.String,System.Int32)">
            <summary>
            Redact a string.
            </summary>
            <param name="str">String.</param>
            <param name="replacementChar">Replacement character.</param>
            <param name="charsToRetain">Number of characters to retain.</param>
            <returns>Redacted string.</returns>
        </member>
        <member name="T:LiteGraph.Helpers.VectorHelper">
            <summary>
            Vector helper.
            </summary>
        </member>
        <member name="M:LiteGraph.Helpers.VectorHelper.CalculateCosineSimilarity(System.Collections.Generic.List{System.Single},System.Collections.Generic.List{System.Single})">
            <summary>
            Calculates the cosine similarity between two vectors
            </summary>
            <returns>Value between -1 and 1, where 1 means vectors are identical, 0 means orthogonal, -1 means opposite</returns>
        </member>
        <member name="M:LiteGraph.Helpers.VectorHelper.CalculateCosineDistance(System.Collections.Generic.List{System.Single},System.Collections.Generic.List{System.Single})">
            <summary>
            Calculates the cosine distance between two vectors
            </summary>
            <returns>Value between 0 and 2, where 0 means vectors are identical, 2 means opposite</returns>
        </member>
        <member name="M:LiteGraph.Helpers.VectorHelper.CalculateEuclidianSimilarity(System.Collections.Generic.List{System.Single},System.Collections.Generic.List{System.Single})">
            <summary>
            Calculates the Euclidean similarity between two vectors
            </summary>
            <returns>Value between 0 and 1, where 1 means vectors are identical</returns>
        </member>
        <member name="M:LiteGraph.Helpers.VectorHelper.CalculateEuclidianDistance(System.Collections.Generic.List{System.Single},System.Collections.Generic.List{System.Single})">
            <summary>
            Calculates the Euclidean distance between two vectors
            </summary>
            <returns>Value >= 0, where 0 means vectors are identical</returns>
        </member>
        <member name="M:LiteGraph.Helpers.VectorHelper.CalculateInnerProduct(System.Collections.Generic.List{System.Single},System.Collections.Generic.List{System.Single})">
            <summary>
            Calculates the inner (dot) product of two vectors
            </summary>
            <returns>The sum of the element-wise products</returns>
        </member>
        <member name="T:LiteGraph.LabelMetadata">
            <summary>
            Label metadata.
            </summary>we
        </member>
        <member name="P:LiteGraph.LabelMetadata.GUID">
            <summary>
            GUID.
            </summary>
        </member>
        <member name="P:LiteGraph.LabelMetadata.TenantGUID">
            <summary>
            Tenant GUID.
            </summary>
        </member>
        <member name="P:LiteGraph.LabelMetadata.GraphGUID">
            <summary>
            Graph GUID.
            </summary>
        </member>
        <member name="P:LiteGraph.LabelMetadata.NodeGUID">
            <summary>
            Node GUID.
            </summary>
        </member>
        <member name="P:LiteGraph.LabelMetadata.EdgeGUID">
            <summary>
            Edge GUID.
            </summary>
        </member>
        <member name="P:LiteGraph.LabelMetadata.Label">
            <summary>
            Key.
            </summary>
        </member>
        <member name="P:LiteGraph.LabelMetadata.CreatedUtc">
            <summary>
            Creation timestamp, in UTC.
            </summary>
        </member>
        <member name="P:LiteGraph.LabelMetadata.LastUpdateUtc">
            <summary>
            Timestamp from last update, in UTC.
            </summary>
        </member>
        <member name="M:LiteGraph.LabelMetadata.#ctor">
            <summary>
            Instantiate.
            </summary>
        </member>
        <member name="M:LiteGraph.LabelMetadata.FromListString(System.Guid,System.Guid,System.Nullable{System.Guid},System.Nullable{System.Guid},System.Collections.Generic.List{System.String})">
            <summary>
            Create a list of label metadata from a list of labels.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="nodeGuid">Node GUID.</param>
            <param name="edgeGuid">Edge GUID.</param>
            <param name="labels">Labels.</param>
            <returns>List of label metadata.</returns>
        </member>
        <member name="M:LiteGraph.LabelMetadata.ToListString(System.Collections.Generic.List{LiteGraph.LabelMetadata})">
            <summary>
            Create a list of strings for all labels in the list.
            </summary>
            <param name="labels">Labels.</param>
            <returns>Labels.</returns>
        </member>
        <member name="T:LiteGraph.LiteGraphClient">
            <summary>
            LiteGraph client.
            The LiteGraph client leverages an underlying graph repository base class, which provides primitives.
            </summary>
        </member>
        <member name="P:LiteGraph.LiteGraphClient.Logging">
            <summary>
            Logging settings.
            </summary>
        </member>
        <member name="P:LiteGraph.LiteGraphClient.Caching">
            <summary>
            Caching settings.
            </summary>
        </member>
        <member name="P:LiteGraph.LiteGraphClient.Storage">
            <summary>
            Storage settings.
            </summary>
        </member>
        <member name="P:LiteGraph.LiteGraphClient.Serializer">
            <summary>
            Serialization helper.
            </summary>
        </member>
        <member name="P:LiteGraph.LiteGraphClient.Admin">
            <inheritdoc />
        </member>
        <member name="P:LiteGraph.LiteGraphClient.Batch">
            <inheritdoc />
        </member>
        <member name="P:LiteGraph.LiteGraphClient.Credential">
            <inheritdoc />
        </member>
        <member name="P:LiteGraph.LiteGraphClient.Edge">
            <inheritdoc />
        </member>
        <member name="P:LiteGraph.LiteGraphClient.Graph">
            <inheritdoc />
        </member>
        <member name="P:LiteGraph.LiteGraphClient.Label">
            <inheritdoc />
        </member>
        <member name="P:LiteGraph.LiteGraphClient.Node">
            <inheritdoc />
        </member>
        <member name="P:LiteGraph.LiteGraphClient.Tag">
            <inheritdoc />
        </member>
        <member name="P:LiteGraph.LiteGraphClient.Tenant">
            <inheritdoc />
        </member>
        <member name="P:LiteGraph.LiteGraphClient.User">
            <inheritdoc />
        </member>
        <member name="P:LiteGraph.LiteGraphClient.Vector">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.LiteGraphClient.#ctor(LiteGraph.GraphRepositories.GraphRepositoryBase,LiteGraph.LoggingSettings,LiteGraph.CachingSettings,LiteGraph.StorageSettings)">
            <summary>
            Instantiate LiteGraph client.
            </summary>
            <param name="repo">Graph repository driver.</param>
            <param name="logging">Logging.</param>
            <param name="caching">Caching settings.</param>
            <param name="storage">Storage settings.</param>
        </member>
        <member name="M:LiteGraph.LiteGraphClient.Dispose(System.Boolean)">
            <summary>
            Dispose of the object.
            </summary>
            <param name="disposing">Disposing of resources.</param>
        </member>
        <member name="M:LiteGraph.LiteGraphClient.Dispose">
            <summary>
            Tear down the client and dispose of resources.
            </summary>
        </member>
        <member name="M:LiteGraph.LiteGraphClient.InitializeRepository">
            <summary>
            Initialize the repository.
            </summary>
        </member>
        <member name="M:LiteGraph.LiteGraphClient.ConvertData``1(System.Object)">
            <summary>
            Convert data associated with a graph, node, or edge to a specific type.
            </summary>
            <typeparam name="T">Type.</typeparam>
            <param name="data">Data.</param>
            <returns>Instance.</returns>
        </member>
        <member name="M:LiteGraph.LiteGraphClient.ExportGraphToGexfFile(System.Guid,System.Guid,System.String,System.Boolean)">
            <summary>
            Export graph to GEXF.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="filename">Filename.</param>
            <param name="includeData">True to include data.</param>
        </member>
        <member name="M:LiteGraph.LiteGraphClient.RenderGraphAsGexf(System.Guid,System.Guid,System.Boolean)">
            <summary>
            Render a graph as GEXF.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="includeData">True to include data.</param>
            <returns>GEXF string.</returns>
        </member>
        <member name="M:LiteGraph.LiteGraphClient.Flush">
            <summary>
            Flush the database to disk.  Only useful when using an in-memory LiteGraph instance.
            </summary>
        </member>
        <member name="T:LiteGraph.LoggingSettings">
            <summary>
            Logging settings.
            </summary>
        </member>
        <member name="P:LiteGraph.LoggingSettings.Enable">
            <summary>
            Enable or disable logging.
            </summary>
        </member>
        <member name="P:LiteGraph.LoggingSettings.Servers">
            <summary>
            List of syslog servers.
            </summary>
        </member>
        <member name="P:LiteGraph.LoggingSettings.LogDirectory">
            <summary>
            Log directory.
            </summary>
        </member>
        <member name="P:LiteGraph.LoggingSettings.LogFilename">
            <summary>
            Log filename.
            </summary>
        </member>
        <member name="P:LiteGraph.LoggingSettings.ConsoleLogging">
            <summary>
            Enable or disable console logging.
            </summary>
        </member>
        <member name="P:LiteGraph.LoggingSettings.EnableColors">
            <summary>
            Enable colors in logging.
            </summary>
        </member>
        <member name="P:LiteGraph.LoggingSettings.MinimumSeverity">
            <summary>
            Minimum severity.
            </summary>
        </member>
        <member name="P:LiteGraph.LoggingSettings.Header">
            <summary>
            Header to prepend to emitted messages.
            </summary>
        </member>
        <member name="P:LiteGraph.LoggingSettings.Logger">
            <summary>
            Method to invoke to send log messages.
            </summary>
        </member>
        <member name="P:LiteGraph.LoggingSettings.LogQueries">
            <summary>
            Enable or disable logging of queries.
            </summary>
        </member>
        <member name="P:LiteGraph.LoggingSettings.LogResults">
            <summary>
            Enable or disable logging of results.
            </summary>
        </member>
        <member name="M:LiteGraph.LoggingSettings.#ctor">
            <summary>
            Logging settings.
            </summary>
        </member>
        <member name="M:LiteGraph.LoggingSettings.Log(LiteGraph.SeverityEnum,System.String)">
            <summary>
            Emit a log message.
            </summary>
            <param name="sev">Severity.</param>
            <param name="msg">Message.</param>
        </member>
        <member name="T:LiteGraph.Node">
            <summary>
            Node in the graph.
            </summary>
        </member>
        <member name="P:LiteGraph.Node.TenantGUID">
            <summary>
            Tenant GUID.
            </summary>
        </member>
        <member name="P:LiteGraph.Node.GUID">
            <summary>
            Globally-unique identifier.
            </summary>
        </member>
        <member name="P:LiteGraph.Node.GraphGUID">
            <summary>
            Globally-unique identifier for the graph.
            </summary>
        </member>
        <member name="P:LiteGraph.Node.Name">
            <summary>
            Name.
            </summary>
        </member>
        <member name="P:LiteGraph.Node.EdgesIn">
            <summary>
            Number of edges connected to this node.
            </summary>
        </member>
        <member name="P:LiteGraph.Node.EdgesOut">
            <summary>
            Number of edges connected from this node.
            </summary>
        </member>
        <member name="P:LiteGraph.Node.EdgesTotal">
            <summary>
            Number of total edges to or from this node.
            </summary>
        </member>
        <member name="P:LiteGraph.Node.CreatedUtc">
            <summary>
            Timestamp from creation, in UTC.
            </summary>
        </member>
        <member name="P:LiteGraph.Node.LastUpdateUtc">
            <summary>
            Timestamp from last update, in UTC.
            </summary>
        </member>
        <member name="P:LiteGraph.Node.Labels">
            <summary>
            Labels.
            </summary>
        </member>
        <member name="P:LiteGraph.Node.Tags">
            <summary>
            Tags.
            </summary>
        </member>
        <member name="P:LiteGraph.Node.Data">
            <summary>
            Object data.
            </summary>
        </member>
        <member name="P:LiteGraph.Node.Vectors">
            <summary>
            Vectors.
            </summary>
        </member>
        <member name="M:LiteGraph.Node.#ctor">
            <summary>
            Instantiate the object.
            </summary>
        </member>
        <member name="T:LiteGraph.RouteDetail">
            <summary>
            Total cost and ordered list of edges between two nodes.
            </summary>
        </member>
        <member name="P:LiteGraph.RouteDetail.TotalCost">
            <summary>
            Total cost of the route.
            </summary>
        </member>
        <member name="P:LiteGraph.RouteDetail.Edges">
            <summary>
            Edges.
            </summary>
        </member>
        <member name="M:LiteGraph.RouteDetail.#ctor">
            <summary>
            Instantiate the object.
            </summary>
        </member>
        <member name="T:LiteGraph.SearchRequest">
            <summary>
            Search request.
            </summary>
        </member>
        <member name="P:LiteGraph.SearchRequest.TenantGUID">
            <summary>
            Tenant GUID.
            </summary>
        </member>
        <member name="P:LiteGraph.SearchRequest.GraphGUID">
            <summary>
            Graph GUID.
            </summary>
        </member>
        <member name="P:LiteGraph.SearchRequest.Ordering">
            <summary>
            Ordering.
            </summary>
        </member>
        <member name="P:LiteGraph.SearchRequest.MaxResults">
            <summary>
            Maximum number of results to retrieve.
            </summary>
        </member>
        <member name="P:LiteGraph.SearchRequest.Skip">
            <summary>
            The number of records to skip.
            </summary>
        </member>
        <member name="P:LiteGraph.SearchRequest.Labels">
            <summary>
            Search labels.
            </summary>
        </member>
        <member name="P:LiteGraph.SearchRequest.Tags">
            <summary>
            Search tags.
            </summary>
        </member>
        <member name="P:LiteGraph.SearchRequest.Expr">
            <summary>
            Expression.
            </summary>
        </member>
        <member name="M:LiteGraph.SearchRequest.#ctor">
            <summary>
            Instantiate the object.
            </summary>
        </member>
        <member name="T:LiteGraph.SearchResult">
            <summary>
            Search result.
            </summary>
        </member>
        <member name="P:LiteGraph.SearchResult.Graphs">
            <summary>
            Graphs.
            </summary>
        </member>
        <member name="P:LiteGraph.SearchResult.Nodes">
            <summary>
            Nodes.
            </summary>
        </member>
        <member name="P:LiteGraph.SearchResult.Edges">
            <summary>
            Edges.
            </summary>
        </member>
        <member name="M:LiteGraph.SearchResult.#ctor">
            <summary>
            Instantiate the object.
            </summary>
        </member>
        <member name="T:LiteGraph.SearchTypeEnum">
            <summary>
            Search type.
            </summary>
        </member>
        <member name="F:LiteGraph.SearchTypeEnum.DepthFirstSearch">
            <summary>
            Depth first search.
            </summary>
        </member>
        <member name="T:LiteGraph.Serialization.ISerializer">
            <summary>
            Serializer interface.
            </summary>
        </member>
        <member name="M:LiteGraph.Serialization.ISerializer.CopyObject``1(``0)">
            <summary>
            Copy an object.
            </summary>
            <typeparam name="T">Type.</typeparam>
            <param name="obj">Object.</param>
            <returns>Copied object.</returns>
        </member>
        <member name="M:LiteGraph.Serialization.ISerializer.SerializeJson(System.Object,System.Boolean)">
            <summary>
            Serialize an object to JSON.
            </summary>
            <param name="obj">Object.</param>
            <param name="pretty">Enable or disable pretty formatting.</param>
            <returns></returns>
        </member>
        <member name="M:LiteGraph.Serialization.ISerializer.DeserializeJson``1(System.String)">
            <summary>
            Deserialize an object to JSON.
            </summary>
            <typeparam name="T">Type.</typeparam>
            <param name="json">JSON.</param>
            <returns>Instance.</returns>
        </member>
        <member name="T:LiteGraph.Serialization.Serializer">
            <summary>
            Serialization.
            </summary>
        </member>
        <member name="M:LiteGraph.Serialization.Serializer.CopyObject``1(``0)">
            <inheritdoc/>
        </member>
        <member name="M:LiteGraph.Serialization.Serializer.DeserializeJson``1(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:LiteGraph.Serialization.Serializer.SerializeJson(System.Object,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:LiteGraph.SeverityEnum">
            <summary>
            Message severity.
            </summary>
        </member>
        <member name="F:LiteGraph.SeverityEnum.Debug">
            <summary>
            Debug messages.
            </summary>
        </member>
        <member name="F:LiteGraph.SeverityEnum.Info">
            <summary>
            Informational messages.
            </summary>
        </member>
        <member name="F:LiteGraph.SeverityEnum.Warn">
            <summary>
            Warning messages.
            </summary>
        </member>
        <member name="F:LiteGraph.SeverityEnum.Error">
            <summary>
            Error messages.
            </summary>
        </member>
        <member name="F:LiteGraph.SeverityEnum.Alert">
            <summary>
            Alert messages.
            </summary>
        </member>
        <member name="F:LiteGraph.SeverityEnum.Critical">
            <summary>
            Critical messages.
            </summary>
        </member>
        <member name="F:LiteGraph.SeverityEnum.Emergency">
            <summary>
            Emergency messages.
            </summary>
        </member>
        <member name="T:LiteGraph.StorageSettings">
            <summary>
            Storage settings.
            </summary>
        </member>
        <member name="P:LiteGraph.StorageSettings.BackupsDirectory">
            <summary>
            Backups directory.
            </summary>
        </member>
        <member name="M:LiteGraph.StorageSettings.#ctor">
            <summary>
            Instantiate.
            </summary>
        </member>
        <member name="T:LiteGraph.SyslogServer">
            <summary>
            Syslog server settings.
            </summary>
        </member>
        <member name="P:LiteGraph.SyslogServer.Hostname">
            <summary>
            Hostname.
            </summary>
        </member>
        <member name="P:LiteGraph.SyslogServer.Port">
            <summary>
            Port.
            </summary>
        </member>
        <member name="M:LiteGraph.SyslogServer.#ctor">
            <summary>
            Instantiate.
            </summary>
        </member>
        <member name="M:LiteGraph.SyslogServer.#ctor(System.String,System.Int32)">
            <summary>
            Instantiate.
            </summary>
            <param name="hostname">Hostname.</param>
            <param name="port">Port.</param>
        </member>
        <member name="T:LiteGraph.TagMetadata">
            <summary>
            Tag metadata.
            </summary>
        </member>
        <member name="P:LiteGraph.TagMetadata.GUID">
            <summary>
            GUID.
            </summary>
        </member>
        <member name="P:LiteGraph.TagMetadata.TenantGUID">
            <summary>
            Tenant GUID.
            </summary>
        </member>
        <member name="P:LiteGraph.TagMetadata.GraphGUID">
            <summary>
            Graph GUID.
            </summary>
        </member>
        <member name="P:LiteGraph.TagMetadata.NodeGUID">
            <summary>
            Node GUID.
            </summary>
        </member>
        <member name="P:LiteGraph.TagMetadata.EdgeGUID">
            <summary>
            Edge GUID.
            </summary>
        </member>
        <member name="P:LiteGraph.TagMetadata.Key">
            <summary>
            Key.
            </summary>
        </member>
        <member name="P:LiteGraph.TagMetadata.Value">
            <summary>
            Value.
            </summary>
        </member>
        <member name="P:LiteGraph.TagMetadata.CreatedUtc">
            <summary>
            Creation timestamp, in UTC.
            </summary>
        </member>
        <member name="P:LiteGraph.TagMetadata.LastUpdateUtc">
            <summary>
            Timestamp from last update, in UTC.
            </summary>
        </member>
        <member name="M:LiteGraph.TagMetadata.#ctor">
            <summary>
            Instantiate.
            </summary>
        </member>
        <member name="M:LiteGraph.TagMetadata.ToNameValueCollection(System.Collections.Generic.List{LiteGraph.TagMetadata})">
            <summary>
            Convert a list of tag metadata to a name value collection.
            </summary>
            <param name="tags">Tags.</param>
            <returns>Name value collection.</returns>
        </member>
        <member name="M:LiteGraph.TagMetadata.FromNameValueCollection(System.Guid,System.Guid,System.Nullable{System.Guid},System.Nullable{System.Guid},System.Collections.Specialized.NameValueCollection)">
            <summary>
            Convert a dictionary to a list of tags.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="nodeGuid">Node GUID.</param>
            <param name="edgeGuid">Edge GUID.</param>
            <param name="nvc">Name value collection.</param>
            <returns>List of tags.</returns>
        </member>
        <member name="M:LiteGraph.TagMetadata.FromTags(System.Collections.Generic.List{LiteGraph.TagMetadata},System.Guid,System.Nullable{System.Guid},System.Nullable{System.Guid},System.Nullable{System.Guid})">
            <summary>
            Retrieve tags from a given name value collection.
            </summary>
            <param name="tags">Tags.</param>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="nodeGuid">Node GUID.</param>
            <param name="edgeGuid">Edge GUID.</param>
            <returns>Name value collection.</returns>
        </member>
        <member name="T:LiteGraph.TenantMetadata">
            <summary>
            Tenant metadata.
            </summary>
        </member>
        <member name="P:LiteGraph.TenantMetadata.GUID">
            <summary>
            GUID.
            </summary>
        </member>
        <member name="P:LiteGraph.TenantMetadata.Name">
            <summary>
            Name.
            </summary>
        </member>
        <member name="P:LiteGraph.TenantMetadata.Active">
            <summary>
            Active.
            </summary>
        </member>
        <member name="P:LiteGraph.TenantMetadata.CreatedUtc">
            <summary>
            Created timestamp, in UTC timestamp.
            </summary>
        </member>
        <member name="P:LiteGraph.TenantMetadata.LastUpdateUtc">
            <summary>
            Timestamp from last update, in UTC.
            </summary>
        </member>
        <member name="M:LiteGraph.TenantMetadata.#ctor">
            <summary>
            Instantiate.
            </summary>
        </member>
        <member name="T:LiteGraph.TenantStatistics">
            <summary>
            Tenant statistics.
            </summary>
        </member>
        <member name="P:LiteGraph.TenantStatistics.Graphs">
            <summary>
            Number of graphs.
            </summary>
        </member>
        <member name="P:LiteGraph.TenantStatistics.Nodes">
            <summary>
            Number of nodes.
            </summary>
        </member>
        <member name="P:LiteGraph.TenantStatistics.Edges">
            <summary>
            Number of edges.
            </summary>
        </member>
        <member name="P:LiteGraph.TenantStatistics.Labels">
            <summary>
            Number of labels.
            </summary>
        </member>
        <member name="P:LiteGraph.TenantStatistics.Tags">
            <summary>
            Number of tags.
            </summary>
        </member>
        <member name="P:LiteGraph.TenantStatistics.Vectors">
            <summary>
            Number of vectors.
            </summary>
        </member>
        <member name="M:LiteGraph.TenantStatistics.#ctor">
            <summary>
            Tenant statistics.
            </summary>
        </member>
        <member name="T:LiteGraph.UserMaster">
            <summary>
            User.
            </summary>
        </member>
        <member name="P:LiteGraph.UserMaster.GUID">
            <summary>
            GUID.
            </summary>
        </member>
        <member name="P:LiteGraph.UserMaster.TenantGUID">
            <summary>
            Tenant GUID.
            </summary>
        </member>
        <member name="P:LiteGraph.UserMaster.FirstName">
            <summary>
            First name.
            </summary>
        </member>
        <member name="P:LiteGraph.UserMaster.LastName">
            <summary>
            Last name.
            </summary>
        </member>
        <member name="P:LiteGraph.UserMaster.Email">
            <summary>
            Email.
            </summary>
        </member>
        <member name="P:LiteGraph.UserMaster.Password">
            <summary>
            Password.
            </summary>
        </member>
        <member name="P:LiteGraph.UserMaster.Active">
            <summary>
            Active.
            </summary>
        </member>
        <member name="P:LiteGraph.UserMaster.CreatedUtc">
            <summary>
            Creation time, in UTC.
            </summary>
        </member>
        <member name="P:LiteGraph.UserMaster.LastUpdateUtc">
            <summary>
            Timestamp from last update, in UTC.
            </summary>
        </member>
        <member name="M:LiteGraph.UserMaster.#ctor">
            <summary>
            Instantiate.
            </summary>
        </member>
        <member name="M:LiteGraph.UserMaster.Redact(LiteGraph.Serialization.ISerializer,LiteGraph.UserMaster)">
            <summary>
            Redact.
            </summary>
            <param name="serializer">Serializer.</param>
            <param name="user">User.</param>
            <returns>User.</returns>
        </member>
        <member name="T:LiteGraph.VectorMetadata">
            <summary>
            Vector metadata.
            </summary>
        </member>
        <member name="P:LiteGraph.VectorMetadata.GUID">
            <summary>
            GUID.
            </summary>
        </member>
        <member name="P:LiteGraph.VectorMetadata.TenantGUID">
            <summary>
            Tenant GUID.
            </summary>
        </member>
        <member name="P:LiteGraph.VectorMetadata.GraphGUID">
            <summary>
            Graph GUID.
            </summary>
        </member>
        <member name="P:LiteGraph.VectorMetadata.NodeGUID">
            <summary>
            Node GUID.
            </summary>
        </member>
        <member name="P:LiteGraph.VectorMetadata.EdgeGUID">
            <summary>
            Edge GUID.
            </summary>
        </member>
        <member name="P:LiteGraph.VectorMetadata.Model">
            <summary>
            Model.
            </summary>
        </member>
        <member name="P:LiteGraph.VectorMetadata.Dimensionality">
            <summary>
            Dimensionality.
            </summary>
        </member>
        <member name="P:LiteGraph.VectorMetadata.Content">
            <summary>
            Content.
            </summary>
        </member>
        <member name="P:LiteGraph.VectorMetadata.Vectors">
            <summary>
            Vectors.
            </summary>
        </member>
        <member name="P:LiteGraph.VectorMetadata.CreatedUtc">
            <summary>
            Creation timestamp, in UTC.
            </summary>
        </member>
        <member name="P:LiteGraph.VectorMetadata.LastUpdateUtc">
            <summary>
            Timestamp from last update, in UTC.
            </summary>
        </member>
        <member name="M:LiteGraph.VectorMetadata.#ctor">
            <summary>
            Instantiate.
            </summary>
        </member>
        <member name="M:LiteGraph.VectorMetadata.FromFloatsList(System.Guid,System.Guid,System.Nullable{System.Guid},System.Nullable{System.Guid},System.Collections.Generic.List{System.Collections.Generic.List{System.Single}})">
            <summary>
            Create a list of vector metadata from a list of floats.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="nodeGuid">Node GUID.</param>
            <param name="edgeGuid">Edge GUID.</param>
            <param name="embeddings">Embeddings.</param>
            <returns>List of vector metadata.</returns>
        </member>
        <member name="M:LiteGraph.VectorMetadata.ToListString(System.Collections.Generic.List{LiteGraph.VectorMetadata})">
            <summary>
            Create a list float lists for all vector metadata entries.
            </summary>
            <param name="vectors">Vectors.</param>
            <returns>Labels.</returns>
        </member>
        <member name="T:LiteGraph.VectorSearchDomainEnum">
            <summary>
            Vector search domain.
            </summary>
        </member>
        <member name="F:LiteGraph.VectorSearchDomainEnum.Graph">
            <summary>
            Graph.
            </summary>
        </member>
        <member name="F:LiteGraph.VectorSearchDomainEnum.Node">
            <summary>
            Node.
            </summary>
        </member>
        <member name="F:LiteGraph.VectorSearchDomainEnum.Edge">
            <summary>
            Edge.
            </summary>
        </member>
        <member name="T:LiteGraph.VectorSearchRequest">
            <summary>
            Vector search request.
            </summary>
        </member>
        <member name="P:LiteGraph.VectorSearchRequest.TenantGUID">
            <summary>
            Tenant GUID.
            </summary>
        </member>
        <member name="P:LiteGraph.VectorSearchRequest.GraphGUID">
            <summary>
            Graph GUID.
            </summary>
        </member>
        <member name="P:LiteGraph.VectorSearchRequest.Domain">
            <summary>
            Vector search domain.
            </summary>
        </member>
        <member name="P:LiteGraph.VectorSearchRequest.SearchType">
            <summary>
            Vector search type.
            </summary>
        </member>
        <member name="P:LiteGraph.VectorSearchRequest.Labels">
            <summary>
            Search labels.
            </summary>
        </member>
        <member name="P:LiteGraph.VectorSearchRequest.Tags">
            <summary>
            Search tags.
            </summary>
        </member>
        <member name="P:LiteGraph.VectorSearchRequest.Expr">
            <summary>
            Expression.
            </summary>
        </member>
        <member name="P:LiteGraph.VectorSearchRequest.Embeddings">
            <summary>
            Embeddings.
            </summary>
        </member>
        <member name="M:LiteGraph.VectorSearchRequest.#ctor">
            <summary>
            Instantiate the object.
            </summary>
        </member>
        <member name="T:LiteGraph.VectorSearchResult">
            <summary>
            Vector search result.
            </summary>
        </member>
        <member name="P:LiteGraph.VectorSearchResult.Score">
            <summary>
            Score.
            </summary>
        </member>
        <member name="P:LiteGraph.VectorSearchResult.Distance">
            <summary>
            Distance.
            </summary>
        </member>
        <member name="P:LiteGraph.VectorSearchResult.InnerProduct">
            <summary>
            Inner product.
            </summary>
        </member>
        <member name="P:LiteGraph.VectorSearchResult.Graph">
            <summary>
            Graph.
            </summary>
        </member>
        <member name="P:LiteGraph.VectorSearchResult.Node">
            <summary>
            Node.
            </summary>
        </member>
        <member name="P:LiteGraph.VectorSearchResult.Edge">
            <summary>
            Edge.
            </summary>
        </member>
        <member name="M:LiteGraph.VectorSearchResult.#ctor">
            <summary>
            Instantiate the object.
            </summary>
        </member>
        <member name="T:LiteGraph.VectorSearchTypeEnum">
            <summary>
            Vector search type.
            </summary>
        </member>
        <member name="F:LiteGraph.VectorSearchTypeEnum.CosineDistance">
            <summary>
            Cosine distance, the inverse of cosine similarity.
            </summary>
        </member>
        <member name="F:LiteGraph.VectorSearchTypeEnum.CosineSimilarity">
            <summary>
            Cosine similarity, the inverse of cosine distance.
            </summary>
        </member>
        <member name="F:LiteGraph.VectorSearchTypeEnum.EuclidianDistance">
            <summary>
            Euclidian distance, also known as L2 distance, the inverse of Euclidian similarity or L2 similarity.
            </summary>
        </member>
        <member name="F:LiteGraph.VectorSearchTypeEnum.EuclidianSimilarity">
            <summary>
            Euclidian simmilarity, also known as L2 similarity, the inverse of Euclidian distance or L2 distance.
            </summary>
        </member>
        <member name="F:LiteGraph.VectorSearchTypeEnum.DotProduct">
            <summary>
            Dot product similarity.  Equivalent to cosine similarity when vectors are normalized, that is, magnitudes are all 1.
            </summary>
        </member>
    </members>
</doc>
